<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="August" day="04"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.
This property cannot be updated.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='min_verification_interval'><vspace blankLines='0'/>
  An integer indicating the minimum amount of time in seconds that must pass
in between verification requests. If an Event Receiver submits verification
requests more frequently than this, the Event Transmitter MAY respond with a
429 status code. An Event Transmitter SHOULD NOT respond with a 429 status
code if an Event Receiver is not exceeding this frequency.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "enabled",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "min_verification_interval": 60,
  "status": "enabled"
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream configured for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration" title="Updating a Stream’s Configuration">
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP POST request to the Configuration Endpoint. The POST body contains a
{{!JSON} representation of the updated configuration. On receiving a valid
request the Event Transmitter responds with a 200 OK response containing a
<xref target="JSON"/> representation of the updated stream configuration in the body.</t>

<t>The full set of editable properties must be present in the POST body, not only
the ones that are specifically intended to be changed. Missing properties
SHOULD be interpreted as requested to be deleted. Event Receivers should read
the configuration first, modify the <xref target="JSON"/> representation, then make an
update request.</t>

<t>Properties that cannot be updated MAY be present, but they MUST match the
expected value.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><artwork><![CDATA[
POST /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
</texttable>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
WmJT498oiEk1If4b8h56uXtVAAA=

-->

</rfc>

