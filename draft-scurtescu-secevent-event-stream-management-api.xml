<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='min_verification_interval'><vspace blankLines='0'/>
  An integer indicating the minimum amount of time in seconds that must pass
in between verification requests. If an Event Receiver submits verification
requests more frequently than this, the Event Transmitter MAY respond with a
429 status code. An Event Transmitter MUST NOT respond with a 429 status code
if an Event Receiver is not exceeding this frequency.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "min_verification_interval": 60,
  "status": "enabled"
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  ]
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAGLCcFkAA+1cbXMbN5L+jl+Bkz/EqZB6i+1d885Vq9iOrZxteSXZuVwq
5QJnQHLi4YA7mJHCyMpvv6cbwAxmOJTs5JyrvTtVbUxyBkCj0f30K3Y8Hosq
q3I9kS9VoeZ6qYtKHr0+ljNTyrOn5/LpBf1yVpVaLa1Q02mpLyZS069jy7+O
l83IsVplIjVJoZaYMS3VDC8ldVlp/HdsdeLG3TB6vL8vUlVh9OH+wV/G+w/G
hw9Fgh/mplxPZFbMjMhW5URWZW2rw/39h/uHQijMNJFnGktl1VpcmvL9vDT1
aiLDmuK9XuPndCKPi0qXha7GT4g8IWylivSdyk2BRdfailU2kT9WJhlJa0rQ
OLP4tF7Sh5+wVF0tTDkRciwk/rLCgnW78izskn91+3+pyqy2vUemnKsi+1VV
mSkm8pkx81zzA71UWT6Ry4Zff5vzw93ELDurHe3Kb1TyHnyL1joqCjXVea47
z7qLHS3Vr6aIFyuzZKEw8m+KH7ml8CcKUy4x6kJjo/K7s5NXE3n67eO/HNx/
iO/06f7BQ3oECZnwCC9E4Qi82Jyb97qQd/HWl+4tVc51NZGLqlrZyd5eZUxu
dzNdzXZB6t6iWuZ7Tmrot1ZgKppnvH/Ak9yR5ydPTibyzYoERV5m1ULi/HP8
Z6ZLXSR6F+89efri+O3T0x+65EGgHU1PdI7dlWv5xmbFXD4/P389SOEcs9dT
YsxeVqR6pfGfosrSvWP+t1qPead2b5qb6d5SWQiX38KiJiEPW0j9grvVL9VH
b0OMx2OpptAUlUBUt3NXhukx+h91VmrrVBRfE00PrKwMxCfNSJcEPrvHmLiw
y6yq+I2Flrae/qyTymJVU1fycgEJoQdrEGgXNImfUfAEUA1oj1yYy8GX6Mfl
rjxfZFbalU6yGa0PYQS9s6wAlapg3ksRMEfJqbJZIhNTVKXJ5SpXBc2jqiGS
E4zPlqvc4RZIEf1tL9Va1lYTUQ5peJuzHBSbmZvSyllpltIU/BYeC4P/lJ79
yyxNoaLimOhJ64TJv7qT0ddr8Sj6Ex+xT9omFpnqlmydymlzpNHmBHGWN067
xAhsI3r1ND7Zf9R09rSzGK8lsK2qcUaVESpN+ahKvTQX8TnTIth1mc3nupSY
sCEeDPjtt9/EV+Po7yvZ++s+FR/iZx8CHY9NMcvm9EP8FC87avnv38a9v6/i
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
nY/QrbPEUOP/L1IooybEfwFo1xsBTEoAAA==

-->

</rfc>

