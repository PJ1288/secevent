<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="August" day="04"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.
This property cannot be updated.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "enabled",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream configured for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration" title="Updating a Stream’s Configuration">
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP POST request to the Configuration Endpoint. The POST body contains a
{{!JSON} representation of the updated configuration. On receiving a valid
request the Event Transmitter responds with a 200 OK response containing a
<xref target="JSON"/> representation of the updated stream configuration in the body.</t>

<t>The full set of editable properties must be present in the POST body, not only
the ones that are specifically intended to be changed. Missing properties
SHOULD be interpreted as requested to be deleted. Event Receivers should read
the configuration first, modify the <xref target="JSON"/> representation, then make an
update request.</t>

<t>Properties that cannot be updated MAY be present, but they MUST match the
expected value.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><artwork><![CDATA[
POST /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
</texttable>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAOLfhFkAA+1cbXPbtpb+jl+BdT40nUp+S9LbaDczdZM0cW8S59pOut1O
pwORkMSGInQJ0q6apL99n3MAkCBF2U676d3uVjOJJREvBwfn5TkHBxqPx6LK
qlxP5HNVqLle6qKSRy+P5cyU8uzxuXx8Qd+cVaVWSyvUdFrqi4nU9O3Y8rfj
ZdNzrFaZSE1SqCVGTEs1Q6OkLiuN/8dWJ67fFb3H+/siVRV6H+4f/G28/8V4
/65I8MXclOuJzIqZEdmqnMiqrG11uL9/f/9QCIWRJvJMY6qsWotLU76Zl6Ze
TWSYU7zRa3ydTuRxUemy0NX4EZEnhK1Ukf6oclNg0rW2YpVN5PeVSUbSmhI0
zizerZf05gdMVVcLU06EHAuJV1ZYsG5XnoVV8rdu/c9VmdW298iUc1Vkv6gq
M8VEPjFmnmt+oJcqyydy2fDryzk/3E3MsjPb0a78SiVvwLdorqOiUFOd57rz
rDvZ0VL9Yop4sjJLFgo9v1T8yE2FlyhMuUSvC42Fym/OTl5M5OnXD/92cO8+
PtO7ewf36REkZMI9vBCFLfBic27e6ELeRqtPXStVznU1kYuqWtnJ3l5lTG53
M13NdkHq3qJa5ntOaui7VmAqGme8f8CD3JLnJ49OJvLVigRFXmbVQmL/c/w3
06UuEr2Ldo8ePzt+/fj0uy55EGhH0yOdY3XlWr6yWTGXT8/PXw5SOMfo9ZQY
s5cVqV5p/FdUWbp3zH+r9ZhXavemuZnuLZWFcPklLGoS8rCE1E+4W/1c3XgZ
YjweSzWFpqgEorqduzIMj97/rLNSW6ei+JhoemBlZSA+aUa6JPDePcbAhV1m
VcUtFlraevqTTiqLWU1dycsFJIQerEGgXdAgfkTBA0A1oD1yYS4HG9GXy115
vsistCudZDOaH8IIemdZASpVwbyXItgcJafKZolMTFGVJperXBU0jqqGSE7Q
P1uucme3QIroL3up1rK2mohyloaXOctBsZm5Ia2clWYpTcGt8FgY/Fd69i+z
NIWKimOiJ60TJv/trYw+vhcPope4wTppmZhkqluydSqnzZZGixPEWV44rRI9
sIyo6Wm8s/+sae9pZbG9lrBtVY09qoxQacpbVeqluYj3mSbBqstsPtelxIAN
8WDAr7/+Kj4bR6/PZO/VfSrexc/eBToemmKWzemL+CkaO2r59R/j3uuz+Ck1
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
xH8DUsKSBLlTAAA=

-->

</rfc>

