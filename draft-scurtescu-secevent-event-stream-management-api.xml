<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.
This property cannot be updated.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "enabled",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream configured for this Event Receiver</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration" title="Updating a Stream’s Configuration">
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP POST request to the Configuration Endpoint. The POST body contains a
{{!JSON} representation of the updated configuration. On receiving a valid
request the Event Transmitter responds with a 200 OK response containing a
<xref target="JSON"/> representation of the updated stream configuration in the body.</t>

<t>The full set of editable properties must be present in the POST body, not only
the ones that are specifically intended to be changed. Missing properties
SHOULD be interpreted as requested to be deleted. Event Receivers should read
the configuration first, modify the <xref target="JSON"/> representation, then make an
update request.</t>

<t>Properties that cannot be updated MAY be present, but they MUST match the
expected value.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><artwork><![CDATA[
POST /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIACR0eFkAA+1cbZPbNpL+jl+BG3+IU5HmLXZ2rT1XZWI79mRtj3dm7Fwu
lUpBJCQxpggtQc5EsZ3fvk83ABKkqJlxcvZe7jJViSURL41GvzzdaHA8Hosq
q3I9kc9UoeZ6qYtKHr04ljNTyrNH5/LRBf1yVpVaLa1Q02mpLyZS069jy7+O
l03PsVplIjVJoZYYMS3VDI2Suqw0/j+2OnH9rug93t8XqarQ+3D/4C/j/S/G
h/dEgh/mplxPZFbMjMhW5URWZW2rw/39e/uHQiiMNJFnGlNl1VpcmvL1vDT1
aiLDnOK1XuPndCKPi0qXha7GD4k8IWylivRHlZsCk661FatsIr+vTDKS1pSg
cWbxab2kDz9gqrpamHIi5FhI/GWFBet25VlYJf/q1v9MlVlte49MOVdF9ouq
MlNM5GNj5rnmB3qpsnwilw2/vpzzw93ELDuzHe3Kr1TyGnyL5joqCjXVea47
z7qTHS3VL6aIJyuzZKHQ80vFj9xU+BOFKZfodaGxUPnN2cnziTz9+sFfDu7e
w3f6dPfgHj2ChEy4hxeisAVebM7Na13I22j1qWulyrmuJnJRVSs72durjMnt
bqar2S5I3VtUy3zPSQ391gpMReOM9w94kFvy/OThyUS+XJGgyMusWkjsf47/
zXSpi0Tvot3DR0+PXz06/a5LHgTa0fRQ51hduZYvbVbM5ZPz8xeDFM4xej0l
xuxlRapXGv8rqizdO+Z/q/WYV2r3prmZ7i2VhXD5JSxqEvKwhNRPuFv9XN14
GWI8Hks1haaoBKK6nbsyDI/e/6yzUlunoviaaHpgZWUgPmlGuiTw2T3GwIVd
ZlXFLRZa2nr6k04qi1lNXcnLBSSEHqxBoF3QIH5EwQNANaA9cmEuBxvRj8td
eb7IrLQrnWQzmh/CCHpnWQEqVcG8lyLYHCWnymaJTExRlSaXq1wVNI6qhkhO
0D9brnJnt0CK6C97qdaytpqIcpaGlznLQbGZuSGtnJVmKU3BrfBYGPyv9Oxf
ZmkKFRXHRE9aJ0z+m1sZfX0n7kd/4gbrpGVikqluydapnDZbGi1OEGd54bRK
9MAyoqan8c7+s6a9p5XF9lrCtlU19qgyQqUpb1Wpl+Yi3meaBKsus/lclxID
NsSDAb/++qv4bBz9fSZ7f92n4m387G2g44EpZtmcfoiforGjlv/+c9z7+yx+
So39YG7k3t/bhh++ceTOmp5nzI4BMmhX5FYyeo07s26QcVXjI+zBmWP8dY0/
JBmnTgQCJf8uMl5FonZN4/9RMt5LnkkB3kzkLYgva7zzJPd3OmrWhU4774R4
AvPibQuwSbDO2qkg21ngl6Sq8ay1QtSyMBXMtLSJWWm2hxVsiujYFKjlc1Px
R3gLqBb1xhcLqwSredE1Sh3zpOVrMtLAQVbuPHt5dr4zcv/K5yf8+fTRP14e
nz56SJ/Pnhw9fdp8cC0Evpy8fOqf06e254OTZ88ePX/oOj87+m7H+Yadkxfn
xyfPj57u0MJ4OUCItTPYpQ7WkFDZqtRkDZUFw2xSZlN8QZ83b/4DkOPw4ODe
u3dY/EMyqVlYMQxsZ8Gw0xK2jp+zYdPl0nozzKN9D3/5w+1b5DVHA9wlK+tc
4czk8BKEDniMiSBBuLArlWD/97HLQYEcFJhlsD0n/IsA1mLUJI1rQc5MgWiM
pQBJK9p0cjfY36UBD5JcZcvgc1Uwzmz8gRUuF3DzlSJnXxmgE/gmWRcZbH6+
lpmbfO08he8ZXK6byY1OaM3t2JQEEj+WjtdwLipJ9KpSU8DHS/hLggph2MZR
YCDwzMIBYaSY+A77rKNjVZpZhtEiZmPntinNm1ttELBNeu+Lvtvz7rzBHgFz
xMBkG6QRDq0owhOm11Ma8iLgSodc+N2leh2wIsMsbStyvgKYcGUy6skC3vPB
XeMALpxf3UJi43rYoB0zwgeMdiBYNrNud7oy2xC1KbfOG9elk/dHviEJbdF0
c2CDeaPSjUV9AuRVlyX9kMSDYXXex/7OUR1wwXCxy7xmTEI4zV7T9+4OYrCe
47uWxi5SYpC4OWjHjV07JEvNlg0NyBYWIB7UCz5LZZ9lxKFiYCiYX4d6Sf4R
IMqXp08tKXsrq+RclnVeZRA16WJxOxJQ3Avovgeew3QuMI41GHSpKXzM7BIN
EW7PF3G8ANAqIuOkpVqtciyJjExH/Bn1F2s5hwoWgUUjqXfnu8xzDrlpHM/j
BHaLviqEjpKUKW0cAqmBrUFBQ5kldYLaW5DC0N55VlaXPlhn6Y3watCQN7cc
e96JPgyhv3YDWinudMc0pYZrs06fyeJ2nANHfkRaq7zYhZUuq0wPaK+qU/Yv
oImaxq4FhrxOMwodnc13nrT1fDzrt3rqIkeY8dvffHv+Keyzj+g/dbueBX9m
IwFo4LUDJX0xlM7jeMJ59wnKUNTC8W0K5jrzCuIDItglJVFlCZeDDXl5emwb
v8Nul4TXuTBvmZ14kXBPtWhB1bBqyGM4WRbZdDQQXgVvCKuOgDi4S3Whspxl
1IWC/dVfZMrJPoeIkDMMKG+TrIpVPc0R/hLlGYM4U+RgvQxoh6WB3GCI1W8E
Eyi9s3eh8lrLlcrKILJrv/etnImVKtGWlxb2iPIdTWYAzxYmdSqjgD0BHnvP
IKqi2fzG8/CEaEzQcSf0+NH12GmkVzoap9pRj82E9IlY+kJGBvIWPhI3nKmP
RdqnKYIIdH1C8HQuzrdhqyvJMHahYLEJnIgNh8j0kT5J2dMoCatIW57i04TZ
E+UYsMA8b01zDBE8jgcBI0JQQNVMskshSP8oMgfgQ38ziJqVIvewfW7So2vm
3+33JNRIfRcmT9m4+n4Y4dLU+I0Z1XZISbVy7Wlx2IkGwDjN1JTL8Vi0mRir
89sy1QnUAmGF5+UOry3N7DWcvcHqWnKoNYbqr4rEPVeRC7WWzbmU4tatW/LB
QievnVg2JtrBlNZ2NwqeUGO7RfBgYWO5i0AhnB3jwsfQuMbLmy6netBoV54U
Hno64iChWRp6i2HfCzeyMgXCN9Y7JQ/39+XJ3/3PcPgdE4LAiczLu3cidjUw
LXiMzVYV9G1aV1ruuCUiYrtcGKuDIjqVzmyk32YmBnbfo9pW2TJycoUpxk0i
WeqfFaHamDvM6z5TP7HeJExc+ok4ugdjuOce7/ndIG7vHeweINS21SSWq10/
E2ezjzhd36TAv9KIekqp19/sTw+rfJodf3G8fHXnu28PLqePX2azf5j7ccjv
5gLFTdjvhp44merllU7dyij+fw9uuI3ziw2r8vtKUL2i7PH5eoVJPYKipez9
ZE3xN3BQleDN/ZfnX4//Kh4ocHT8wGVOJ5hxbCtEaOJFqeZLxT8k1ASYAroR
Nn3S6qx4N7R6u7rh8t1SaP2kdqfA+D2t6+CqAeVDcNtVvS6SIg18L9UbjnQ+
puI1yK9ZQUd9ekjRmdapSde/UaM4rlJ9QCo60wzr1cdRKKLPETOkVCQxchCC
/9FUCzic9IpOkSZ7e5eXlzEPd0bUJEABtHvDB0Ib2AoD1GUx8T0n4ShpEtpN
aPgfV9guHlFS8zxMS4dX4RQknnzP+cwddHg3GrYC/LNvNpHfh6EHKHGNJhVY
+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
/v15lFQT4l9QqIy3aVQAAA==

-->

</rfc>

