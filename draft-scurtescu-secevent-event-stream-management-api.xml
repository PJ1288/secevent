<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
Iq3zEbqllhhq/P9lg5JqQvwXstEQXY9IAAA=

-->

</rfc>

