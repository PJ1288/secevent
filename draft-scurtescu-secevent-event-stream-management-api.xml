<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
Nf5/b0FJNSH+BchKWG8ISAAA

-->

</rfc>

