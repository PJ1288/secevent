<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='min_verification_interval'><vspace blankLines='0'/>
  An integer indicating the minimum amount of time in seconds that must pass
in between verification requests. If an Event Receiver submits verification
requests more frequently than this, the Event Transmitter MAY respond with a
429 status code. An Event Transmitter SHOULD NOT respond with a 429 status
code if an Event Receiver is not exceeding this frequency.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "min_verification_interval": 60,
  "status": "enabled"
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
    }
  ]
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAFHSd1kAA+1cbXMbN5L+jl+Bkz/EqZB6i+1d885Vq9iOrZxteSXZuVwq
5QJnQHLi4YA7mJHCyMpvv6cbwAxmOJTs5JyrvTtVbUxyBkCj0f30K3Y8Hosq
q3I9kS9VoeZ6qYtKHr0+ljNTyrOn5/LpBf1yVpVaLa1Q02mpLyZS069jy7+O
l83IsVplIjVJoZaYMS3VDC8ldVlp/HdsdeLG3TB6vL8vUlVh9OH+wV/G+w/G
hw9Fgh/mplxPZFbMjMhW5URWZW2rw/39h/uHQijMNJFnGktl1VpcmvL9vDT1
aiLDmuK9XuPndCKPi0qXha7GT4g8IWylivSdyk2BRdfailU2kT9WJhlJa0rQ
OLP4tF7Sh5+wVF0tTDkRciwk/rLCgnW78izskn91+3+pyqy2vUemnKsi+1VV
mSkm8pkx81zzA71UWT6Ry4Zff5vzw93ELDurHe3Kb1TyHnyL1joqCjXVea47
z7qLHS3Vr6aIFyuzZKEw8m+KH7ml8CcKUy4x6kJjo/K7s5NXE3n67eO/HNx/
iO/06f7BQ3oECZnwCC9E4Qi82Jyb97qQd/HWl+4tVc51NZGLqlrZyd5eZUxu
dzNdzXZB6t6iWuZ7Tmrot1ZgKppnvH/Ak9yR5ydPTibyzYoERV5m1ULi/HP8
Z6ZLXSR6F+89efri+O3T0x+65EGgHU1PdI7dlWv5xmbFXD4/P389SOEcs9dT
YsxeVqR6pfGfosrSvWP+t1qPead2b5qb6d5SWQiX38KiJiEPW0j9grvVL9VH
b0OMx2OpptAUlUBUt3NXhukx+h91VmrrVBRfE00PrKwMxCfNSJcEPrvHmLiw
y6yq+I2Flrae/qyTymJVU1fycgEJoQdrEGgXNImfUfAEUA1oj1yYy8GX6Mfl
rjxfZFbalU6yGa0PYQS9s6wAlapg3ksRMEfJqbJZIhNTVKXJ5SpXBc2jqiGS
E4zPlqvc4RZIEf1tL9Va1lYTUQ5peJuzHBSbmZvSyllpltIU/BYeC4P/lJ79
yyxNoaLimOhJ64TJv7qT0ddr8Sj6Ex+xT9omFpnqlmydymlzpNHmBHGWN067
xAhsI3r1ND7Zf9R09rSzGK8lsK2qcUaVESpN+ahKvTQX8TnTIth1mc3nupSY
sCEeDPjtt9/EV+Po7yvZ++s+FR/iZx8CHY9NMcvm9EP8FC87avnv38a9v6/i
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
Zgcd9el54w5apyZd/06N4thV9Z1+0VlmWK/+HIVyhAwpFEmLHAxx/tnUCnEO
6RRV6SZ7e5eXlzH/dkb0SnAD8N4VF9w23FtMUJfFxI+chFLdJLw3oenfrXBU
PKOk1/OwLBUHQ5UpXnzP2csdDLhmOvz3ifwxzDGwpHtpUoFX7w7a1W558/Cj
3/ya6PmJ6dnqkoPEB/ujjwGtIGEDoHWTiLXQdRZyKgit/cfbguvWeaCSny9k
dtI8MZLAheIQDk4LOz8QnHBYnPWzA2m/kH1FqFVlSZ2rsknEAgh3KKlczHcw
pdjh1BB/i7Ou3ajyzPtVxCY8xEI5IQ6h9lEaQLsdGBBcnLtMlopn7aHNaCh4
pVC3rTO+Pjk7Fz2kHsqljWJQjbCxJU5spLc34/iW0qkm6nXK+E97SBJt7azO
RYCLbdFTD/zhsCxX1bpvAzr5037wlSyMcaVeC0ebg7ZsXlAYR0s2mSVyZb22
iGzW2QGltmBMLjJTWxrt5SwNLIxd65AhW8vUsNPM6WQvTI4VsfM/mHJAVOVi
Soi1Z42oNkLKCvq9lSOS02cEsKVZlRlphS5L/EgBo7h7pikLHxoHHlO+ONVO
JS1l5nWC377k7DyNclUoC7apXPswlAUKmOCDWM4jOgtB/uMHTIrI9IN8wjWb
FSv7B/HBV9A66kyVunsgH297xgcRZZmDapO2TilGKillil303qNsHmn2ZWYp
IeC8CjftgZ9WxdZTzlSW+5l4NAcukFs35uuIlOGoWtE+2wQzn9UAQrjp7kXT
hSd+HoCNmRfZrzdk9LdpBrUwJIsg2RW+OfEO9TSWHV/cZx3y3SQkKEzX4cMb
twnXyUfV3COxbosbGenw/CJDPNrLxXxgW1CpKWl7WQY70IEYlqdPdCkawNrE
QBEiVYC7V+mIx93UFhTiZKWL4yck8QW9wh1PLi3qHRaCSO+deRs0oUU/n4/m
XBcmhG2rn622uvxb7L50jS1oGvLlYk7/Ee/N2Z4Wp8MZbPHqzuAq6HI7Wz7a
j+vvcMCX6G6xH/g4CxzZqfOmZNPKzVDN5nbr6USjZz23FI8+gwF1u/jjJhRn
dk++MtJ74rEN/X+svwXrvST9c8H9vc8P944vEeL31eL3g/4QrPcqFnDOF6bQ
74p6OaVQ4GY092f4uQE9Jolw/SsCywfy/v37cv/g8OsenDuihqPzDif/HFCP
AeKzgHvY72Cs2NtwC/GdovrVnTheHQ4UESrCk+biHamHr9E0NZCmzNjJXktT
bPR5cEYeqMQVBHB8FFJggJQ0m80ICCpfs+4rF7cbUSUDLKB3XRtvU5rSv1Ag
SJKsFwohBrdwDJFFOEatYWntTlLgQVTgCPWIfkMMRcZth4GiWLZTDXON8L2w
ZLC8OnJQGMxTGW2Q6SiXrjepzbORVEYkJqbEIArAapxpVxIx16rqlJi4tCJU
8r4wlwDwObfCcCKy21zBFKrcNlTYblQVoahwHcNFOq7MGP+0VSEQSvcDsLcR
AC/JawZDtoLcj9dhGXcUF0m5XvkGga3dFoSqWwiuuI5CODri/RI0AzIQLwZb
wWfWNxVNjOg8ns2ZGRcGFmSA4GsNqky5TNzUcVsUaQoTAy0GXiTXKy1cRclv
GT9w7Tez1FXPWSfq059wcdr2Mk9jGj+BIOhJzNIdX47UUasAVUXNSoELvgLS
dKEMMqQtkGm/Xy6hcQOzTn3vm0NJx9a2CJPF41ZqnRtFBcI3K9PNVm9yddBr
dJ2R7MCEkjx3bbOrQpE4VZdd+x1H+q0nccN0GxrmeEKQw5k5vcObsw2ecHU7
Lh8176VGOxGDnUgWI0E5BM4NtMkDellXT1SldqL+QJdzAOvuWq3pVgcz4nD3
HhWnrq5Cif/6mhIH2Bj7ER54B7oxSEF8mZK8M1vbFatLEGSPvayzBH6s1y1o
AEZYhNZ0N4Awy51iCxjcKye4Qpm8Z+ToPrpRsc6d5Gw7+F0XWNwCq8Q027Rp
bY84xA35un7EMdhZNgrOPRU/xGZvCQ2MmkU8zA51RYxcN8HaxRli01sYRbpS
fUymruNMRNHG26GeDF8e74DSTX1PfdDw/UXTDKQB1n059Ya2NW5e0PCsIUWQ
ksoQagx4yMUmx5gHX9gGMfqmFzPFHXeNHobwwZ2GM58wjFRHH5Yi4igmU4MH
1ur55kBCPOqBU60ZifoKXLpSF32CmCU+DAMKkH3r2mqPEi6MdkJ6k3A2gCPa
DH04kKHdAsRiXyTW+BF1WK1bEBxuQ+wkWBthNb7vIQWIGLK/7Be6xkx/vLOa
jP3uNrCKGzL8pNQcRnlWuy6SRWkKU1vqliSCXfOER0/fKUbvnr04Ytge2Hrs
7wlyDeymPxca86W7dxZgbxB8IPuiw8qWSnDRsFgTRkexrClTVubcxRD+XH1V
WEDi6uhywv/NnMHnjKTZoEWBdFeh/lDuNFzm6sKIc+s2wmVvWT9flPxpheC2
bUJTMP322WKVrL+h/y2m2Te5fvZtlTz7JT9+/mr/h/84xb//uZg+f5u/mJtH
vUjbbWwo0vYWv4th/0vi7bDrgXh7y7bbqPvI35j4qL1zfDaARewFwbgOqAy3
PoM0iqC9Y6KmlALososl4Ocqo/M/OPz63v0HrqIPzYyr71u45t71DQJDFXo/
map4/nsPv/7r/Qf7+/s7W6v1nx7jyNBz8PtFmcZS2+RPQ0JN7cP90+2cKgIR
rrMP1/3kla/7bb9s01xuel2aKRmXjWxLxYlKwmIDxCTPvpMU6VxsMDLX6j3f
3mcxosiaq+0hVyfCBQLIRNaGJ7Z3ryNq6D3i/GujgERLfL15QPoaTyRM1kRH
+peMvF3XgO5mUimGIISu8jU82Qu6l71JfTwZt4mH+CCyskQUYlluyMZ6FKQ0
6wZ/cYNj1PQHbMgS3V6bGmpvT4C+Lj7S5HM6f4v7pFJ/Qa4uUg6Yw7UMwY6R
Lyl3Y8EbmD3sJYlQmWZca44ipDgqdyHc95+6pnRQ6hIlbWOpc4fTcGh+cedS
bfWIlLX1Ugd2d5bnrn3RFuf9hjutHn5N2V2TQ9n2jJ8roLOtBoQ/6ADfh+N0
vYu/JIIXS7cy23t5Gce8sejcfX18/CX5G+6SAYEru4yJGBawjfhr1JW7uGXW
O7d8t1H4awLOwQNrFtmqSUVyL8Ol4aZud9/MsLSzDg+cNvCcJYmzShAnuiUS
UcuMJsfQqYpv0e6fHqVtWieVL6k1zRKYAWFyHi5HdTuAue2ZrU0C+8c0gpzg
x1GChw0vzbMqswtOvLTU3ahBzb3TQckni8X4vWQ6zUzw++xoFlGZ0VWcu/t1
Enx0+pQF1uCE543MeULEpjhqzlGGeTdTzKCySXp28sBiI4Zpu2GaaIbiIM7t
jlxn1IA+QDOFu4nVEtHENk1eq1UvOnWIfdvkYhfKlXE68uw1xIcMWdHKbJOb
7O10qmfk63TkpZsxjm954QQcyPH1L0+nv30F8ogQYAxRFl0GkzdfBnuJWRLq
BIpKFEtDl1eG8YD71YAHYRRZgTXjwwxWgOILWBUomZprelxF9eqBEqO7+ta0
59OVIw7YeFhaJ3qAaV9QF1uWk8XHayli/KQSLUGK2tDo4TD+cT6cr5O7O2Sd
R07v3P8zBrXAAudgGMivaC7IZI1LEOrgTlGcxjS5qGaDptwS2bsyA07c1T/Y
YtyI3DwXB/kcY6lZFS43RH1dU83XC7m2HjIaNlxf25IHaMgIod6AwsREsIaJ
XsgXyIk6BYfp2VTqnumrTE4+XKjIRATx2s3lV1qK02vxGqK3hgOoxqSWmmwA
PbdtS6R1PkK3zhJDjf8/SaGMmhD/BfOcLyhOSgAA

-->

</rfc>

