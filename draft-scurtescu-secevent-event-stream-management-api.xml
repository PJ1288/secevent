<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="August" day="10"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.
This property cannot be updated.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='min_verification_interval'><vspace blankLines='0'/>
  An integer indicating the minimum amount of time in seconds that must pass
in between verification requests. If an Event Receiver submits verification
requests more frequently than this, the Event Transmitter MAY respond with a
429 status code. An Event Transmitter SHOULD NOT respond with a 429 status
code if an Event Receiver is not exceeding this frequency.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "enabled",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "min_verification_interval": 60,
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream configured for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration" title="Updating a Stream’s Configuration">
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP POST request to the Configuration Endpoint. The POST body contains a
{{!JSON} representation of the updated configuration. On receiving a valid
request the Event Transmitter responds with a 200 OK response containing a
<xref target="JSON"/> representation of the updated stream configuration in the body.</t>

<t>The full set of editable properties must be present in the POST body, not only
the ones that are specifically intended to be changed. Missing properties
SHOULD be interpreted as requested to be deleted. Event Receivers should read
the configuration first, modify the <xref target="JSON"/> representation, then make an
update request.</t>

<t>Properties that cannot be updated MAY be present, but they MUST match the
expected value.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><artwork><![CDATA[
POST /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
</texttable>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
oalx7w7EpJoQ/w3DEsLTZVUAAA==

-->

</rfc>

