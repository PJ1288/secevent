<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.
This property cannot be updated.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "enabled",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream configured for this Event Receiver</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration" title="Updating a Stream’s Configuration">
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP POST request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the updated stream configuration in the body.</t>

<t>The full set of properties must be present in the POST body, not only the ones
that are specifically intended to be changed. Missing properties SHOULD be 
interpreted as requested to be deleted. Event Receivers should read the
configuration first, update the <xref target="JSON"/> representation then make an update
request.</t>

<t>Properties that cannot be updated can be present, but they MUST much the
expected value.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><artwork><![CDATA[
POST /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAJjDcVkAA+1cbZPbNpL+jl+BG3+IU5HmLXZ2rT1XZWI79mRtj3dm7Fwu
lUpBJCQxpggtQc5EGTu/fZ9uACRIUTN2cvZe7jJViSURL41GvzzdaHA8Hosq
q3I9kc9UoeZ6qYtKHr04ljNTyrNH5/LRBf1yVpVaLa1Q02mpLyZS069jy7+O
l03PsVplIjVJoZYYMS3VDI2Suqw0/j+2OnH9ruk93t8XqarQ+3D/4C/j/S/G
h/dEgh/mplxPZFbMjMhW5URWZW2rw/39e/uHQiiMNJFnGlNl1VpcmvL1vDT1
aiLDnOK1XuPndCKPi0qXha7GD4k8IWylivRHlZsCk661FatsIr+vTDKS1pSg
cWbxab2kDz9gqrpamHIi5FhI/GWFBet25VlYJf/q1v9MlVlte49MOVdF9ouq
MlNM5GNj5rnmB3qpsnwilw2/vpzzw93ELDuzHe3Kr1TyGnyL5joqCjXVea47
z7qTHS3VL6aIJyuzZKHQ80vFj9xU+BOFKZfodaGxUPnN2cnziTz9+sFfDu7e
w3f6dPfgHj2ChEy4hxeisAVebM7Na13I22j1qWulyrmuJnJRVSs72durjMnt
bqar2S5I3VtUy3zPSQ391gpMReOM9w94kFvy/OThyUS+XJGgyMusWkjsf47/
zXSpi0Tvot3DR0+PXz06/a5LHgTa0fRQ51hduZYvbVbM5ZPz8xeDFM4xej0l
xuxlRapXGv8rqizdO+Z/q/WYV2r3prmZ7i2VhXD5JSxqEvKwhNRPuFv9XL3z
MsR4PJZqCk1RCUR1O3dlGB69/1lnpbZORfE10fTAyspAfNKMdEngs3uMgQu7
zKqKWyy0tPX0J51UFrOaupKXC0gIPViDQLugQfyIggeAakB75MJcDjaiH5e7
8nyRWWlXOslmND+EEfTOsgJUqoJ5L0WwOUpOlc0SmZiiKk0uV7kqaBxVDZGc
oH+2XOXOboEU0V/2Uq1lbTUR5SwNL3OWg2Izc0NaOSvNUpqCW+GxMPhf6dm/
zNIUKiqOiZ60Tpj8q1sZfX0r7kd/4h3WScvEJFPdkq1TOW22NFqcIM7ywmmV
6IFlRE1P4539Z017TyuL7bWEbatq7FFlhEpT3qpSL81FvM80CVZdZvO5LiUG
bIgHA3799Vfx2Tj6+0z2/rpPxZv42ZtAxwNTzLI5/RA/RWNHLf/957j391n8
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
tA4jdI9aYlPjX3NHSTUh/gVyMnSZEFQAAA==

-->

</rfc>

