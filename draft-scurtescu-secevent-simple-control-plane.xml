<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-simple-control-plane-00" category="info">

  <front>
    <title abbrev="set-control-plane">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s status endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the configuration endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the add subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 1234"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the verification endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the verification endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAPidcFkAA+1bbXPbxrX+vr9iL/UhyUQUJcV2a7aeiWIptnJty5Vop7mZ
jGcJLEnEAJbFLqQwtvLb73P2BViAkCw3de+0vZyJTBL7cl6f85xdZjweM5OZ
XE75c1GKpSxkafjRy1O+UBW/OJnxk0v65sJUUhSaifm8kpdTrqUZJ6o0lcrH
61yUkqUqKUWBddJKLMxYJ3VlJP6OtUwkrTHWWbHOZXfaeH+fpcJg2uH+wR/G
+w/Ghw9Zgi+WqtpMeVYuFMvW1ZSbqtbmcH//4f4hYwLCTPmFxB6Z2bArVb1d
Vqpek1xuM/ZWbvB1OuWnpZFVCXGPSS7GtBFl+kbkqsSmG6nZOpvyH41KdrlW
FdRcaLzbFPTmJ2xVm5WqpoyPGccrKzUstccvgnr2W6f4c1Flte49UtVSlNmv
wmSqnPInSi1zaR/IQmT5lBeNob5e2od7iSo6ux3t8W9E8rYQZbTXUVmKucxz
2XnW3eyoEL+qMt6sypKVwMyvhX3ktsKLlaoqMOtSQlH+3cXZiyk///bxHw7u
P8Rnenf/4CE9QkBM7QwfM8EFPkpm6q0s+ecY9YUbJaqlNFO+Mmatp5OJUSrX
e5k0iz2IOlmZIp+4cKHv2kgxtM54/8AussNnZ8dnU/5qTYHCrzKz4vB/jj8L
WckykXsYd3zy7PT1yfkPXfEQv06mY5lDu2rDX+msXPKns9nLQQmXWL2ek2Em
WZnKtcSf0mTp5NT+azZjq6mezHM1nxRCI7i8CquaYjyokPoN98wv5s5qsPF4
zMVcm0okCNWbrcvD8pj9tzqrpOZ2W3xMJD3Q3CiET5pRLjG8d4+xcKmLzBg7
YiW5ruc/y8Ro7Kpqw69WiBB6sIGAekWL+BWZXQCpgezhK3U1OIi+LPb4bJVp
rtcyyRa0P4IR8i6yElKK0tqeswAxgs+FzhLuUYFbVMA6wgyJnGC+RRELUxCF
9dUuxIbXWpJQhQU0q+Yih8Rq4ZbUfFGpgqvSjsJjpvCn8uYvsjRFirJTkiet
Eyv+u52MPl6zR9GL3UFPUhObzGUrtkz5vHFppBwjy1rFSUvMgBrR0PPYs3+r
yfekWQzPHNhmavjIKCbS1LqqkoW6jP1Mm0DrKlsuZcWxYCM8DPDbb7+xL8fR
60vee3Wfsvfxs/dBjgsrB30RP8VgJ619/Xnce30ZP6XBfjG3cu/1vrGHHxxV
r/f8CMpfOI23ZtNg8gq/UYze4M6uW2LcNvjc2T5IctvgTynG68jHHxj8DxXj
owKJIu/dlO8ssqVNNQfhj0ad+O5SlNE1Y0+R1z6pQQoCLEoX+xbgQBwSU+NZ
m/40slQG+Mh1otbSApFBMrNOMiMfXihj3wKmH6uSZuODBhwAri67aNDBBcnf
EjqCgGg+ev7qYjbadf/yF2f2/fnJX16dnp8c0/uLp0fPnjVv3AiGD2evnvnn
9K6d+fjs+fOTF8du8vOjH0YOlEdnL2enZy+Ono1IMasOOFntkLKSAYaIDq0r
STAkNAymkyqb4wPmvHv3X6j1hwcHD6+vofwxYVkWNAaydRQGQHKAjH1uEUVW
hfb4Z1f7EYXqp893qFztDliX4M3VoIXKAc9Ulu0aU0aBcKnXIoH/9+HlkECu
Bi8yJP2Z/YaB5Fi6wpUbQVVEQGisJYijktMJ5+HfQsEGSS6yIhQ7EVDRoi6K
9NUK9dUIqrJGgRagKPC6zAC2+YZnbvONg2g/M9Q6t5NbnWiS89icAhJfVs7W
QHWRJHJtxBy87QqFimp0WLZBaCwEm2kgP1aKhe+YTzs51pVaZFgtMjY8d1PS
vNspmg83Re8j1q83vo42RT8U+5gR3MQlmKMJggq56s3kiuAbVumIi4JXiLeB
pFl+I7WhqsdAxtYqo5k2wHvFrwsOsIL/HokLUKkr4Su5tl9fsz7U0YsddaX5
TFNIRdPh7EoifbQr5OTVTgBaWkeUog1quGgtK5PJgcgWdWpjGDLR0Dh8ESx1
mhEvdHHlsrXNLrvr93LuaCFC5fPvvp99gRjwdP0LFyBZyBkdWaypnQ74uoaE
5Zx/IFmAlD00HACRCjGL8Hx1fqqbwLV5S953OeBd64gkwAlJwFpUth7f2pCf
IkstC0p3B4hRSCeEBahsyDdxiZbGZpIjcX3VLjPktyqQPjaPC4kF+edyb7nH
1vU8B3ElyTNbBVSZw648wKV1NeVRYNl3whlqzCaXIq8lX4usCsxw4x3bBhFb
iwpjrWrBAdSpNJwez1YqJWyRQAxTo/r0niEOWeNZSxKtC2hDDKbaMwoz3rgZ
oyY0uZNxLp30cCZCi8WhFXopBFN4S9Zw7DKOV99ghBBAt1KRD9xAsgl96xi6
Dq423NbBlQAOELoxP6xNGCsfJQvnvXRBI1uSy1O8m1rzRN0BFMzz5osOxngi
AAF2CYJRlq3Ijvxz/yjKddih7wySZi2Ikt+8N3GKD+y/159JZYfmrlROpGUT
5mGFK1XjO2uodkJKqZVLL4sDX1oA6zRbUxfmi1mzMbTzbplLdLeAg5G35cjq
lmb6A5a9g3atODQaS/W1onDPBS3pV9LaEi3O2c7ODn+8kslbF5YN/rpeogXm
JsETGqxvCDzAZxx3UVURJbOF5QkyzheXgCB9S4V6s8fPSl+7nHCI0CwNs1kL
PhFq4aleqxL8z+ad4If7+/zsv/3XaFA7EALmRfByfc3iOgJowWM4Wxjk27w2
ko+caKB8VyulZUhEl9KZjvJbLdiATvD1rJNsGVWwUpXj5giIy18E9aqxdayt
+0b9THtImLrGkSw6ARhO3OOJtyJZe3KwdwCurs00jqs9v5M9hzqyB23N4dU3
ErSp4nLz3f780OTz7PTBafH63g/fH1zNn7zKFn9Rj+Kewe0FiZu+wS09dTHV
a0zPnWbUQHyENZzjvLJBK+9XBpZh6NxntlljU7Fe556oTX7WqvwTLCgq2ObR
q9m34z+yxwIWHT92Zx5T7DjWBhSPvazEshD2i4SGgDAgN4LTp23Osush7fX6
juo7VUh/SrtzKdJe1nVI00DygR13U69LkygDPyr1utP/LxKvoXWNBp306dFA
B61zlW7+zozCsmmf+yKhOtsM59U/J6GcIEMJRdHCB7n1v1pagWBTTtHZ73Qy
ubq6iu2HHpy3LArj3tlj3C1ehQXqqpz6mdNwADwN46a0/Js1XGVX5DQ8D9vS
kXM4u4w3n7h6OcKEayuH/zzlP4Y1BrZ0g6YGtnpz0O72gZGHdx75FcnzUxd6
QpwMQM9tgdIC0EXoGtGZ+bcf6s1aCkDHwf6Qm5KqyacYD0CEbAcA6mEpDNwf
TG4bUz3QmYYDAjB1kyU1WvjmrABwNqJzj3I5wpJsZA9Y7af4YKDblFx4dkRm
wkNslBNuEPYepQF624kBh9lMcXuOG6/aw4zdod6HOqX2DPrl2cWM9fCWlg2L
BrTdjaExQrhWOLZ1ArPdBraSzu02MrUoTjokidR6UecsJH0s/C0QjoJQrM2m
j+QeebenU9uZrJRy1wAadLk0dIKzLOkYhbb01ti1hNTHPMsWHQ1WaLhREi4z
VWua7eMsDSaMCbJ1vT3qSJWlvvbEwweTM0VM4Qc7VvRG7tgOYe1Nw+I9bNtU
SYM0vdEkjoCHg8Y4N5hT2wdIkLepSFdQ1tmHWp2TqlKVOyfV+Fbk1HaQK2w8
gW3UVBBTijHtYZ5I4HukeSr5e35sTxXXNtffs/f+jLeTzXSWfA/CY7S3exDF
hhwym5J1To1ORfcg8FNvHAxlW/urTNOxpqMGbtkDv6yISyBfiCz3K9nZtvtA
2Lo5X0Wi9NIJY0kYQXo671H6WFcNAIRb7l60XHji14EX1LLMfm0b960Qvikx
6HYrWYXANvjkojuc+NrQ8fc+NoX8RSOFiZXr8OGtaoL/+NbYXp9t2uO3jFJ4
eZmhqRSFqkt75GGyAu62pcCIOSV7VYUyEN/BuHj6SF7Q4NU2BLLQbgLbfUZH
Nu4ejCBVztayPD2mGlRavKPLcHeo5lkHIaSnWL4ETWnTT0e0HP+wglhW71dD
S199HXOQbq2FTEOELLb076FgrvS0MB18cAM1u5AVouZms9yZjPU1HKASXRX7
3YsrwFGZmqlw79nGjb3z/eji6UKjVzx793qfsH46LX5/BYXP7vEXins6HZfQ
/8f6D2C9j6R/Lbi/9+nh3tklQvxeWvwO0B+C9d55N7j5SpXyTVkXc+oEbkdz
78NPDeixSITrXxJYPuD379/nB4df3evBuRNquMXuWPKfA+oxQHwScA/6DraK
PYVbiO/8euHdjv3Byma4Q0SPCAptL30oMbRLq4XVuEw2zfVU5/CZq3LrDtIe
qAOP7AUAbL0bTrAAJmm2WBAEGPfzpa2e1F6F00UElKex7rddQDdzJZFN8hfq
ACmG5Uqgt6hs+g6IRQhGP1tIa+dDhgfR/US4Tuhf1lJL3JQrYvmi8xsftxPr
9SOD13K7DgRDYaoiBa0cVeHuzdtjMorHSMREVZhEnVcNb3ZjEGutTeeGaK/n
6gaK3AVIJ+5vu1Kls1C5fXU5z6AwvOkPzJsGaKB7pO5JAnb5XCRvqXXig/Dp
Cvy2cT+jMrHJlUi3vIOVqDe1v0+LDuqb2uJuBZ2FYTu6KRn0n0V5LNZ75k3m
TxZm7idejhl1THvi7G1Z0gcihaoyHYoO3tVHZYvdcvbQp0/dXRry5JkKHcey
7WtWmhjdm/rIGVJ/17KBcuNIE9uGvt3oWtLc5dShg4wRdTrqxrQHXEc0nea3
acxTJS1DYG2bHqJyyOWgX3HOtlvnm126wd606bgd1Kve7NYCyl/vpWAYgBnj
8NNKyHyML2r6AdXe9rLahnN87+gXpct3+gWD3pTJqlKlqjVD0pLA7ojCX+n7
m3gae/HsyCLqgOoxLjIiIXob95ozD/ejXUL1GwxpL75Zx5StlPmmuSfPqiih
/gNZ8qfkjraIR9SxC0+/67Qg/LK1i2buJy1bBNGxiU/ICz/u/qK97ZNEH18/
Wa2TzTf032qefZPLJ9+a5Mkv+enTF/s//PUc//7Pav70df5sqR71uKVTbIhb
+rLQrQj/JgwzaD3AMG9Qu+WZR/5XbHfS3d5vDmCLLZX+sLWXMvanYhCNmKOv
XmJOpLdrLhsBP5uM/E89w/0H7iIKmRlfGt1gNTfW32sNXSz5xYSx6997+NUf
7z/Y398f3XjJRP9jxtQWXt27FBrTndAUREVOnd1HPFyS/d1B7G6i7JXXT7tD
EU2/teq7tuPSi5MZeRN4aukbY/8LoiDqNeI0AAA=

-->

</rfc>

