<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-simple-control-plane-00" category="info">

  <front>
    <title abbrev="set-control-plane">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
</list></t>

<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the configuration endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the add subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 1234"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the verification endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the verification endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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

-->

</rfc>

