<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
WTM1/l1uyhEK8S+R84Ya9UIAAA==

-->

</rfc>

