<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-simple-control-plane-00" category="info">

  <front>
    <title abbrev="set-control-plane">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
</list></t>

<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the configuration endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "https://schemas.example.com/set/http-push",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "https://schemas.openid.net/risc/event-type/account-at-risk",
    "https://schemas.openid.net/risc/event-type/account-deleted",
    "https://schemas.openid.net/risc/event-type/account-locked",
    "https://schemas.openid.net/risc/event-type/account-unlocked",
    "https://schemas.openid.net/risc/event-type/client-credentials-
        revoked",
    "https://schemas.openid.net/risc/event-type/sessions-revoked",
    "https://schemas.openid.net/risc/event-type/tokens-revoked"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the add subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "123-456-7890"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the verification endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the verification endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAAt/cFkAA+1abXPbNhL+jl+Bkz80nVovdpO01l1m6sZu4l4S52w5vVwn
04FISGJNEioB2lFj97ffs3ihSIp23s43cy+aiSOJwGJ3sfvss4D6/T4ziUnl
mD8XuZjLTOaG77884jNV8NPDCT+8oG9OTSFFppmYTgt5MeZamn6kclOotL9M
RS5ZrKJcZJATF2Jm+joqCyPxt69lJElGXyfZMpXNaf3RiMXCYNruaOeb/uhh
f3ePRfhirorVmCf5TLFkWYy5KUptdkejvdEuYwLKjPmpxBqJWbFLVZzPC1Uu
SS+3GDuXK3wdj/lRbmSRQ90D0osxbUQe/yJSlWPRldRsmYz5z0ZF21yrAmbO
NN6tMnrzBkuVZqGKMeN9xvFKcg1PDfhpMM9+6wx/Loqk1K1HqpiLPPldmETl
Y/5EqXkq7QOZiSQd86xy1Hdz+3AQqayx2v6Afy+i80zktbX281xMZZrKxrPm
YvuZ+F3l9cWKJFoIzPxO2EduKbxYrooMsy4kDOU/nh6/GPOTHx5/s/NgD5/p
3YOdPXqEgBjbGT5mwhb4KJmoc5nzexj1pRslirk0Y74wZqnHw6FRKtWDRJrZ
AKoOFyZLhy5c6Lt1pBiS0x/tWCFbfHJ8cDzmZ0sKFH6ZmAXH/qf4M5OFzCM5
wLiDw2dHrw5PXjfVQ/w6nQ5kCuuKFT/TST7nTyeTl50aziG9nJJjhkkey6XE
n9wk8fDI/m9WfWupHk5TNR1mQiO4vAmLkmI8mBD7BQfmrflgM1i/3+diqk0h
IoTqzd7lQTxm/1YmhdTcLouPkaQHmhuF8IkTyiWG9+4xBOc6S4yxIxaS63L6
q4yMxqqqNPxygQihBysoqBckxEtkVgBSA9nDF+qycxB9mQ34ZJForpcySma0
PoIR+s6SHFqK3PqeswAxgk+FTiLuUYFbVIAcYbpUjjDfooiFKajC2mZnYsVL
LUmpzAKaNXOWQmM1cyI1nxUq4yq3o/CYKfwpvPuzJI6RouyI9InLyKr/biuh
j9fsUe3FPsBOMhOLTOVabRnzabWlNeMYedYaTlZiBsyoDT2p7+xvJe09WVaH
Zw5sMyX2yCgm4thuVSEzdVHfZ1oEVhfJfC4LDoGV8nDAH3/8wb7q115f8dar
+ZRd1Z9dBT1OrR70Rf0pBjtt7esv/dbrq/pTGuyFOcmt11XlDz+4Vr2u+D6M
P3UWb8ymwbQr/EY1WoMbq26ocdvgE+f7oMltg+9SjVe1PX7P4H+pGh8VSBR5
78Z8a5bMbao5CH/Ua8R3k6L0rhl7irz2SQ1SEGBRuti3AAfiEJkSz9bpTyNz
ZYCPXEdqKS0QGSQzayQz8uGFMvYtYPqxymk2PmjAAeDqookGDVyQ/JzQEQRE
897zs9NJb9v9z18c2/cnh387Ozo5PKD3p0/3nz2r3rgRDB+Oz5755/RuPfPx
8fPnhy8O3OTn+697DpR7xy8nR8cv9p/1yDBrDjhZ6ZCykAGGiA4tC0kwJDQc
pqMimeID5rx79yfU+t2dnb3raxh/QFiWBIuBbA2DAZAcIGOfW0SRRaY9/llp
P6NQvbm3ReVqu8O7BG+uBs1UCnimsmxljBkFwoVeigj7P8IuhwRyNXiWIOmP
7TcMJMfSFa7cCKoiAkpDliCOSptOOI/9zRR8EKUiyUKxEwEVLeqiSF8uUF+N
oCprFGgBigIv8wRgm6544hZfOYj2M0Otcys56UST3I5NKSDxZeF8DVQXUSSX
RkzB2y5RqKhGB7EVQkMQfKaB/JBUV77hPu30WBZqlkBazdnYuZuS5t1WVn24
KXofsXa98XW0Kvqh2NcZwU1cgjmaIKiQq9ZMrgi+4ZWGuih4mTgPJM3yG6kN
VT0GMrZUCc20Ad4qfk1wgBf890hcgEpZCF/Jtf36mrWhjl5sv6nNF5pCqjYd
m11IpI92hZx2tRGAltYRpVgHNbZoKQuTyI7IFmVsYxg60dB6+CJYyjghXuji
ymXrOrvsqj/JqaOFCJV7P/40+RIx4On6ly5AkpAzuuaxqnY64Gs6Ep5z+wPN
AqQM0HAARArELMLz7ORIV4Fr85Z23+WA31pHJAFOSAK2RmW74xsL8iNkqWVB
8XYHMQrphLAAlQ35Ji7Q0thMciSubdpFgvxWGdLH5nEmIZDfk4P5gC3LaQri
SpontgqoPIVfeYBLu9WUR4FlfxDOUGM2vBBpKflSJEVghiu/sesgYktRYKw1
LWwAdSoVp8ezhYoJWyQQw5SoPq1niENW7awliXYLaEEMptrTCzN+cTN6VWhy
p+NUOu2xmQgtVg+t0EshmMJb8sbW1hbcK2I3r0qQRn6tE6jaCACpiz00MwU9
aWYUPCe4buc+Glqb/k/gFw8BYZ+b0wMmDPhx7vHF6QcrkzjMZesAqUUWnuql
ylGjrW8E3x2N+PFf/ddaNrcZ1ZFC4PqaVQhQWeCZRidiOKiaqngFH04a9S4h
+MhV3q/6by7fCmoU6kZDbNyGyS80aywzdtyd3DVEPA69Q8mHw53BDniSNuN6
LzXwC9kzgH17yFEdHHwvUbIKLlc/jqa7Jp0mRw+Pslf3X/+0czl9cpbM/qYe
1fma6zqgcMXZnOhxqx04cSYRbfsIN7it8PYFe/xOMcSeoW57slpiObFcpr48
Dn/VKv8zjxaigDsenU1+6H/LHotoIfuPXac5xop9bVBY2ctCzDNhv4hoCGAa
eNoD/vbGvEdHA+Ph8PLysu4zUDS+TjKMe2e7/I208wLobEFDdCZ0XYrdK3re
X5Z6YWVCRlmk9XmhuW1MdDjbw4Rrq4n/POY/OxntRVGD8iQe5FivSHQ09Act
8NsQpETR2YUwfTw6D1p8ggQYT8TyMySkKjr/LAFl/skiojSh9xEKFSGrSLU7
haNXIS/Up0kFy9XE1/qfLsIeh60FYP4bdt2VgXr53hR06UQ5eBroGiiRf/s+
UlRhuj2H8adLBFEVOtXRFXTall6UOOq2iBWFULaMUHdQwsDMUSJNEpXgzhVJ
R3HoUcORz3sQyXr2ZMN+qjPyJhtw1m9bGMFDLJSufCXbj0MhW08MVY1NFLcH
KHWpLQTe7iIdRFHWhz8vj08nrFW9SGwQGmrXdr3Q1OrFWjm20fps8q+1plO7
jIxtTSQb0HVoPStTFuC0rvwtBRHlNVuaVbsu+jq2OZ34XrRQyp2/aTQmuaHW
aZ5T/0JLem9sW+Lj8Ywls4YFCzBdFNiLRJWaZvs4i4MLa1XMbb3tMWJFUcZs
q+GDybliPTzuporgn65fRlh717D6GrZvR8dcFvmNLnFdUOjw67nBnNk+QIK+
VX2/hLHOPzE1bkWhCndAofGtSKGz3QobT0jzkuhFTDGmfQGlruIKJCyW/Iof
2HZ+aYnHFbvyhyuNbKZDnPtQHqO934MqNuSQ2ZSsUyKxBR1AYp9a4+Aoy6kv
E03nCY5oObE7XqyoEwo+A1P3kuzsLNH2FN7N+bqmSiudMJaUEWSn2z1KH7tV
HQDhxN2viQtPvBzsgprnye9rxrwRwjclBh0rI7J9YBt8ctEdjlps6PgDV5tC
/oSfwsTqtbt3q5lgkxaOjLLn1qt135tQCs8vUJq4yKjEWb6ZoLG5svBvxJSS
vSgC9NcPP108fSTjqvBqEwKZ9tgHbPcZXfNxsyNBqhyjph0dUIeQW7yjWyjX
zXo+RwjpCasvQWNa9O5oq2N2VhGiWEFaqWXxXZ3dNesrdOqit3VPfw65daVn
DdNhD24gvaeyQNTc7JYPprltCzvoQ9PENXlwvaArwLUyNVHhwmEdN/ay5aOL
pwuNVvFsHajfYf10Vnx+BcWe3ecvFPeNSr2E/h/r34P1PpL+s+D+/t3DvfNL
DfFbafEZoN8F662DJnDzhcrlL3mZTakTuB3N/R7eNaDXVSJc39n9un//wcP+
N9/ujVpY7jTqgvOWG/89iF5HhztB9mBvB7hvGLzG98ad4bste0286m4P0SCC
P9ujVsoK7XJqZi3Oo1V1KByssu0wV/nGyf9lkqYMYGTPOeHr7XAYCCSJk9mM
8t+4Hw1sNKT2AipNLXense4XFYA2cymRSvIttX8UwHIh0FgUNnc71CL4osvC
uHR7yPAgHLRhuvYH1u0rEuqHq1pFFF80btbdSqzVjHQehm87BAxVqagZaPUo
MndbtT5xpHisqRipApOo7Sqxm80YhKylCeeVVqdBa6srHIKbZOt27raLDDqB
kJsXBtMEBmM3/f1G1f10tI7UOklgLp+K6Jz6Jt6Jna66bzr3C6oRq1SJeGN3
IIkaU/urkOr42zrBFRZ3Fu88DN+l1Ld17Z+FeAhrPfMu88cKE/fDCkeLGq49
dP62FOk9kUIlmc6XO2/IajWL3XLw0OZOzVUq5uRpCp1ss83LDZpYu63wkdNl
/ralAvnKMSa2CX3b66BrdPA3Hjk0kLHGm/abMe0B17FMZ/ltFvNYSUsP2LpH
D1HZteXgXvWcXS+drrbp3mi1TsfNoF60Zq89AAQiuKNTCw2YMQ4/rYbMx/is
pJ8tDDbFahvOQW5NKF150b2hXuXRolC5KjVD0pLC7nzCX6T5+y8ae/ps3yJq
h+l1XGTEQPQm7lUHHu6ncoTqNzjSXjexhivXWqar6nYqKWoJ9T9Ike+SONoi
XuONTXj6rKOC8HuyJpq5i+QNdujYxB2Swo+7FnIU0lYw4o6vniyW0ep7+reY
Jt+n8skPJnryNj16+mL0+u8n+P8fi+nTV+mzuXrU4pbOsC5u6ctCsyL8lzDM
YHUHw7zB7DXP3Pe/Hfkg2+1VcQe22FLpT1pbKWN/oAHViDn66iWmRHqb7rIR
8KtJfO+A1sHd7yEz6zdxN3jNjfXXhV23dV6YMFb+/b2vv33wcDQa9Tpv7soi
H9PPoce28Opx+EnxeH0jNAZRkWPn9x4Pd4+fHMTuRsreI77Z7opo+oVDe2sb
W3p6OKHdBJ5a+sbYPwGvtMOeWDAAAA==

-->

</rfc>

