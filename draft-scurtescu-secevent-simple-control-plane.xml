<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-simple-control-plane-00" category="info">

  <front>
    <title abbrev="set-control-plane">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Event Stream'><vspace blankLines='0'/>
  An Event Stream is a configured relationship between a single Event
Transmitter and a single Event Receiver, describing one or more methods by
which the Event Transmitter may deliver SETs to the Event Receiver. Event
Streams are unidirectional, with only one Event Transmitter and one Event
Receiver. Event Transmitters support only one Event Streams for a
single Event Receiver.</t>
  <t hangText='Event Stream Management Endpoint'><vspace blankLines='0'/>
  A URL hosted by the transmitter; it serves as the stream
management API for a stream. An Event Transmitter MAY use a single
Management Endpoint for multiple streams, provided that the transmitter
has some mechanism through which they can identify the applicable stream
for any given request, e.g. from authentication credentials. The
definition of such mechanisms is outside the scope of this specification.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  A URL hosted by the transmitter used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  A URL hosted by the transmitter used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  A URL hosted by the transmitter used to trigger a Verification Event to be
sent to the receiver.</t>
  <t hangText='Event Stream Management API'><vspace blankLines='0'/>
  The API collectively made up by the four endpoints defined above.</t>
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
  <t hangText='Verification Event'><vspace blankLines='0'/>
  A special event type for testing Event Streams. Receivers can request
such an event through the Verification Endpoint. Transmitters can
periodically send these events to ensure the connection is alive.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
</list></t>

<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Event Stream Management Endpoint. On receiving a valid
request the Event Transmitter responds with a 200 OK response containing a
<xref target="JSON"/> representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "https://schemas.example.com/set/http-push",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "https://schemas.openid.net/risc/event-type/account-at-risk",
    "https://schemas.openid.net/risc/event-type/account-deleted",
    "https://schemas.openid.net/risc/event-type/account-locked",
    "https://schemas.openid.net/risc/event-type/account-unlocked",
    "https://schemas.openid.net/risc/event-type/client-credentials-
        revoked",
    "https://schemas.openid.net/risc/event-type/sessions-revoked",
    "https://schemas.openid.net/risc/event-type/tokens-revoked"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "123-456-7890"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIALdzVVkAA+1ba3PbxpL9Pr9ilvqQpEJSjzgP815XRbEUW1nb8tXDudlU
KjUEhiQiAMOLGUhhLOW37+l5AAMQsh17vVX7YFVkEhj0dM90nz7dg0wmE2Yy
k8sZfy5KsZSFLA0/fHnCF6ri58cX/PiarpybSopCMzGfV/J6xrU0k0SVplL5
ZJ2LUrJUJaUoICetxMJMdFJXRuLvRMtEkoyJzop1LruPTfb2WCoMHjvY2/96
svfV5OAhS3BhqarNjGflQrFsXc24qWptDvb2Hu4dMCagzIyfS8yRmQ27UdXV
slL1mvRyk7ErucHldMZPSiOrEuoekV6MaSPK9FeRqxKTbqRm62zGfzYqGXOt
Kpi50Pi2KejLL5iqNitVzRifMI5PVmqs1JSfB/PsVWf4c1Flte7dUtVSlNkf
wmSqnPEnSi1zaW/IQmT5jBfNQn27tDeniSo6sx1O+XciuSpEGc11WJZiLvNc
du51JzssxB+qjCersmQl8OS3wt5yU+HDSlUVeOpawlD+w/npixk/+/7x1/tf
PsRv+vbl/kO6BYeY2Se8z4Qt8F5yoa5kyT/FqM/cKFEtpZnxlTFrPdvdNUrl
eppJs5hC1d2VKfJd5y50rfUUQ3Ime/tWyA6/OD06nfHLNTkKv8nMimP/c/xZ
yEqWiZxi3NHxs5NXx2c/ddWD/zqdjmQO66oNv9RZueRPLy5eDmq4hPR6Tguz
m5WpXEv8KU2W7p7Yf81mYi3Vu/NczXcLoeFc3oRVTT4eTEj9hFPzu3lnM9hk
MuFirk0lErjq/avLg3g8/a86q6Tmdlr8TCTd0NwouE+aUSwxfHe3IbjURWaM
HbGSXNfz32RiNGZVteE3K3gI3dhAQb0iIV4iswIQGogevlI3g4PoYjHlF6tM
c72WSbag+eGM0HeRldBSlHbtOQsQI/hc6CzhHhW4RQXIEWZI5QTPWxSxMAVV
WN/sQmx4rSUpVVhAs2YucmisFk6k5otKFVyVdhRuM4U/lV/+IktThCg7IX3S
OrHqv97J6OcdexR92DvYSWZikrls1ZYpnzdbGhnHaGWt4WQlnoAZ0dCzeGf/
VdPek2UxPHNgm6mxR0YxkaZ2qypZqOt4n2kSWF1ly6WsOAQ2ymMB/vzzT/b5
JPp8znuf7l12G9+7DXqcWz3oQnwXg5229vP3Se/zeXyXBnthTnLvc9ushx8c
Za9bfgjjz53FW0/TYNoVfq8avcGdWbfUeNPgM7f2QZM3Df6YaryK9vgtg/9L
1fhLjkSe93rGdxbZ0oaag/BHo45/dynK6I6xp4hrH9QgBQEWpfN9C3AgDomp
ca8NfxpZKgN85DpRa2mByCCYWSeYEQ8vlLFfAdOPVUlP44cGHACurrto0MEF
ya8IHUFANB89vzy/GI3dv/zFqf1+dvyPy5Oz4yP6fv708Nmz5osbwfDj9PKZ
v0/f2icfnz5/fvziyD38/PCnkQPl0enLi5PTF4fPRmSYNQecrHZIWckAQ0SH
1pUkGBIaC6aTKpvjB555/frfkOsP9vcf3t3B+CPCsixYDGTrGAyA5AAZe98i
iqwK7fHPSvsZieqXT3coXY0HVpfgzeWghcoBz5SWrYwZI0e41muRYP/3sMux
DzDiPl3UAwgLyh9wnZq2vpK5nUGvsjVMNjcSaVNwSvy5B0xk5Ah67fJ1BzTw
Mg5LRPpRyoCrFArLWUgQQ2zvfANhTd7cxnWbkbxfEiHRPun05pk2inmqbfes
LrMU2T1xPjh2rEGV+caqsj0XGdLcIerWld7JN8gJ6zUYb19emN9mZ8gYXBa4
x32ReVymawU3o53il2fPwBa0T3pkdpTP/8YzA8ZeXVPC1CFcaZO5T96dakT4
u9PWA2LbEQk284eNhJABraykos5NhnTsBSJjrit1naXSJ+CenpC0gn5aFbTt
RKEzXWAQSo7lKuZMlp5Yorhwxor1Ooe/z/PIMmtKueFLrGNp+ZvUZszldDl1
xIRKDpLh4ySBT9NPAeoMakV2pU1kEqrpGvM3emmKB3A5DUXcklqIwzizRVew
i3GqfPedc9wEjkw0o+EW9Lsbm5iglwTfY44+hXGLtDVRJ829xzSBEoluwnSz
WPCkYPA/SEj19liA60IDygfkxAmAjmL5WiLgCoH9qddBo4WqKy691i2OgpZf
U2EQls+VIYsMep7aK9ZAqti4ciOISAt4B+BKUJlOOx/jVpKLrAh8X4RVtX5v
gQw+aQQVGkahMlrRApUZfBQqR66NIPFPBrrvZnLSCcVc0ppTTsbFyqUb7JpI
Erk2NiRugIxUpgSxzQ5DkEVKi62x8h3v1U4PhO4ig7Qo32x5g4VDWikrANnc
1xabkPwRgrRiHQScRpybItuHKnkBRRyueCkeCGgbB51w2sXdxFbra4xUVJ/l
WFm4laUrgC/PUahkKzXxFhKLTS1dFrDZjpLJG7zu9U6LnveRlEesX1b4cqmp
7UJNFxd+95WMzFWDwgVH90murm1m6ibtOUXAVajFw9qS3ayNAstjejVON7oo
NNz1x54ACF+wOby9Y31GSx/WoxCf6IY/iLDIlQRL0q5eI8/tBJnNw1Q5ttwF
bogtNZkcIDCiTp33AWMwNA5RBESdZlT+u9hxpKwlUXbWH+XcVf/wm09/+PHi
M/i578p85oIgC7igB7iF57eyj5huf6BZYI42s4qqQlwiBC/PTnQTnJae0e67
OPdb63IfZV6gY0u+7Y5vTchPgEQ2CNLxEB/xkAG3kMwETBHXIsstWgzSJn6d
CZeYbQ2PNAiB/FNKpmxdz/MMJBCaZ5bsg+hgXXlgxXarCStCM+WdsJT6b7vX
Iq8lX4usChl14ze2dSK2FhXGWtPCBlBDqmndOAZpczpQ0dSApd49+CFrdrZJ
XgHDqMQYhSd+dU+MGtfkTse5dNpjM+FaLHat0DKDM4WvtBo7OztYXpG655oA
6cRXG0DNRiBZON9L6qqiO92IwsoF/hbFPpDQhv8TrIuHgO4+308vp/y09Ejj
NIW9WcoaKYNcHBG9ViVYu10lwQ/29vjpv/vLWnY2nKEcIme4u2uxoLGl5arb
2OFAa67SDVbzolPg2FKlVOWkabhy+bugzlBsPsSmfcD8RLPONDPXrKGF24Vn
7vqlpdXc3Z/uozDWZhbznKmfyDZ9D21Xu+kUfyeRoEE/Nj/szQ9MPs9Ovjop
Xj346cf9m/mTy2zxD/UoLtBdmwkKN0W6Ez3r9X/OnElUp/+FZXBb4e0L9vid
YvBCQ+3VC2TuWaDXZMTub1qVf+MgwRWW49HlxfeTb9hjkazk5LFrLc4w40Qb
0Aj2shLLQtgLCQ0BYANZR0Di0YyPqBc82929ubmJ1ww1OW/DDeNe27buVgB6
AdRM1hBdCB1LsXtF9yfrWq+sTMioqzx+riGW8YMOcUd44M5q4n/P+M9ORn9S
ZCMUj9MS81WZTnZ9Zx3rtgsKpqhZLcwEt66CFu8hAcZTJ+EDJOQqufogAXX5
3iKSPKPvUYHljl3oU8lr9X5StdSa2Onk/UXY849WAJ7/hd0NRaBevzUEXThR
DJ4H4gZy5L++jR416G4rW3+c0KnzYnRF8WCTMJIdtdeIHwVXttxQD5DDUIcg
WaLirVEpNCUJ0sSIOkzlcgSRbGTrQPsrrj+G8sXYwkgotXxOO0xDSmsfDPmN
XbhSVsRSewg8HqIfRFbabv/L0/ML1stjQwX2OE40Ub5olWNbhd42E2s1RZUF
7WVqcyLZgBpL60WdswCn43dLiChpirXZ9POiz2PDPZdkpZQ7cNEow0pDheKy
VL5yafobRIE8nrFs0bGAmitIsNeZqjU97f0sDUsYV+uhP7MBjSMvY7boaIum
eTw8va/XduIapHBrvzQsnsM2aitp6qq8d0lcPRRaunFssLg30PaTglvcwFi3
PimVcFWlKtfr07gqcuhst8L6E8K8JnqRugaZS6BUX9yCjqWS3/Ij25xcW+Jx
y259N70TzdS1fwDlMdqve1DFuhwim4J1TnS2olYI9qk3jhpKFNg3maYGsiVa
3Ind92JFTCj4ApzdS7JPF5m2x67umS8iVXrhhLGkjCA72waT3aoBgHDiHkTi
wh0vB7uglmX2R8udt1z4vsCgri082zu2wS/n3aG3bl3Hn7DZEPJHuuQmVq+D
h280kyp+G8nKHlRu2go4oxBeXmfUtC4oxVm+maHEubXwb8Scgr2qAvR3EMb6
019kXA1ebUMg0x77gO0+oqM17tYmCJVT5LSTI6oVqF3hXjtwda3nc4SQnrD6
FDSjST8ebXXMzipCFCtIq7Wsvo3ZXTe/Qqchehuv9IeQW5d6WpgOe3AP6T2n
Fnl1/7K8M83tWzhAH7omtuTBVYUuAUdp6qJpz7Z+M9SffXvydK7RS573NI8/
Qv50Vnx4BsWePeAvFPeFSpxC/x/r34L13pP+Z8H9g48P925dIsTvh8X7g/4Q
rPdaTuDmK1XKX8u6mFMl8GY093v4sQE9Volwff/gi8mDL7+afP3Nw70eljuN
huC8t4z/PYgeo8NHQfZg7wC4bxnc4nvn4OL1jn0vaDNcHqJABH+2TVeKCu1i
amEtLpNN0x4OVtlymKty6wzgJstzBjCyHU+s9Ti0BYEkabZYUPwbf17ajyn7
xkGeW+5OY90rdM1xv/ydyj9yYLkSKCzc0fiAWgRfdMqS1m4PGW5E7xKEE+f+
YUl0HuQovui8SuVmYr1iZLAtPnYIGLJSFRlo9agKdzbXdhzJHyMVE1XRGwIo
nGrsZtcHIWttQr/S6tQ/GmtwCMske69jvOlIgzoQcvvoYJ7BYOymP+loqp+B
0pFKJwnM5XORXFHdxAex02X37cX9hHLEJlci3dodOvn3LwO0jfBwAN505d0K
V/ZtETm4fxbiIax3zy+ZbytcuGNjR4u2Tx2njiK9xVMoJduj5aGzsihnsTc0
HvrcafAochxoCnW22fYxBz0YnVt4zxkyf2ypQLlxjIltQ9+4dbpOBX9vy6GD
jBFvOuz6tAdcxzKd5W+ymKdKWnrA2ho9eOXQltOLKFHMtlPnm7F7VaYJx22n
XvWeblcACERwR10LDZgxDj/dOwrexxc1vac2+KoOuXOQGwmlwy86QdSbMllV
qlS1ZghaUtj1J/yRmj8Jo7Hnzw4tog6YHuMiIwait3GvaXi4d6MJ1e9ZSHvw
xDpL2WqZb5pzqqyKAur/IEX+mMTRJvGIN3YD5INaBe3bMvHeuyPlLXbo2MRH
JIV/7VjIUUibwYg7vnqyWieb7+i/1Tz7LpdPvjfJk9/zk6cv9n765xn+/Y/V
/Omr/NlSPepxS2fYELf0aaGLSf9LGGaweoBh3mN2yzMP/Vsk72S7PTQewBb/
FhYbCBn7qgZUI+bos5d9h6q3XNYDfjOZrx1QOrjzPURmfBJ3z6q5sf64cOi0
zgsTxsp/8PCLb778am9vbzR4cldX5Yz+/5eZTbx6Fv4fkll7IjQDUZEzt+4j
Hs4e39uJ3YmUPUf8ZTzk0fSuQ39rO1t6fnxBuwk8tfSNsf8EySKIp0k2AAA=

-->

</rfc>

