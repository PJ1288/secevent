<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicous-subject-removal" title="Malicous Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIAH+3cFkAA+1ba3PbRpb93r+iV/oQp0LqFdsz5qyrotiKrYxteSTZ2Wwq
5WoCTRIxiOagASmM7fz2Ofd2N9AAQclJ1qma3VVVHJLox+3b93HuA+PxWFRZ
leuJfK4KNddLXVTy+OWpnJlSXpxcypMr+uWiKrVaWqGm01JfTaSmX8eWfx0v
m5ljtcpEapJCLbFiWqoZBiV1WWn8O7Y6cfNumD0+OBCpqjD76ODwL+OD++Oj
ByLBD3NTricyK2ZGZKtyIquyttXRwcGDgyMhFFaayAuNrbJqLa5N+XZemno1
kWFP8Vav8XM6kadFpctCV+PHRJ4QtlJF+kblpsCma23FKpvIHyqTjKQ1JWic
WXxaL+nDj9iqrhamnAg5FhJ/WWHBuj15EU7Jv7rzP1dlVtveI1POVZH9oqrM
FBP5xJh5rvmBXqosn8hlw6+v5vxwLzHLzm7He/JrlbwF36K9jotCTXWe686z
7mbHS/WLKeLNyixZKMz8SvEjtxX+RGHKJWZdaRxUfntx9mIiz7959JfDew/w
nT7dO3xAjyAhE57hhShcgRebS/NWF/IORn3uRqlyrquJXFTVyk729ytjcruX
6Wq2B1L3F9Uy33dSQ7+1AlPROuODQ15kV16ePT6byFcrEhR5nVULifvP8c9M
l7pI9B7GPT55dvr65Pz7LnkQaEfTY53jdOVavrJZMZdPLy9fDlI4x+r1lBiz
nxWpXmn8U1RZun/K/6/WYz6p3Z/mZrq/VBbC5Y+wqEnIwxFSv+Fe9XP10ccQ
4/FYqik0RSUQ1e3clWF5zP5nnZXaOhXF10TTAysrA/FJM9Ilgc/uMRYu7DKr
Kh6x0NLW0590UlnsaupKXi8gIfRgDQLtghbxKwpeAKoB7ZELcz04iH5c7snL
RWalXekkm9H+EEbQO8sKUKkK5r0UweYoOVU2S2Riiqo0uVzlqqB1VDVEcoL5
2XKVO7sFUkT/2Eu1lrXVRJSzNHzMWQ6KzcwtaeWsNEtpCh6Fx8Lgn9Kzf5ml
KVRUnBI9aZ0w+e92M/r6QTyM/sRHnJOOiU2muiVbp3LaXGl0OEGc5YPTKTED
x4iGnsc3+8+a7p5OFttrCdtW1bijygiVpnxVpV6aq/ieaROcuszmc11KLNgQ
Dwb8+uuv4otx9PeF7P11n4r38bP3gY4LpoN+iJ9isKOW//5z3Pv7In5Kg/1i
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
U4ZQiH8BQKBbsvJCAAA=

-->

</rfc>

