<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='min_verification_interval'><vspace blankLines='0'/>
  An integer indicating the minimum amount of time in seconds that must pass
in between verification requests. If an Event Receiver submits verification
requests more frequently than this, the Event Transmitter MAY respond with a
429 status code. An Event Transmitter MUST NOT respond with a 429 status code
if an Event Receiver is not exceeding this frequency.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "min_verification_interval": 60,
  "status": "enabled"
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
H4sIACnBcFkAA+1cbZPbNpL+jl+BG3+IU5HmLbZ3rTtX7cR27MnaHu/M2Llc
KuWCSEhiTBFagpyJMp789nu6AZAgRc3YyTlVe3dTtbEkEkCj0f30K3Y8Hosq
q3I9kS9VoeZ6qYtKHr0+ljNTyrOn5/LpBf1yVpVaLa1Q02mpLyZS069jy7+O
l83IsVplIjVJoZaYMS3VDC8ldVlp/HdsdeLG3TB6vL8vUlVh9OH+wV/G+w/G
hw9Fgh/mplxPZFbMjMhW5URWZW2rw/39h/uHQijMNJFnGktl1VpcmvL9vDT1
aiLDmuK9XuPndCKPi0qXha7GT4g8IWylivSdyk2BRdfailU2kT9WJhlJa0rQ
OLP4tF7Sh5+wVF0tTDkRciwk/rLCgnW78izskn91+3+pyqy2vUemnKsi+1VV
mSkm8pkx81zzA71UWT6Ry4Zff5vzw93ELDurHe3Kb1TyHnyL1joqCjXVea47
z7qLHS3Vr6aIFyuzZKEw8m+KH7ml8CcKUy4x6kJjo/K7s5NXE3n67eO/HNx/
iO/06f7BQ3oECZnwCC9E4Qi82Jyb97qQd/HWl+4tVc51NZGLqlrZyd5eZUxu
dzNdzXZB6t6iWuZ7Tmrot1ZgKppnvH/Ak9yR5ydPTibyzYoERV5m1ULi/HP8
Z6ZLXSR6F+89efri+O3T0x+65EGgHU1PdI7dlWv5xmbFXD4/P389SOEcs9dT
YsxeVqR6pfGfosrSvWP+t1qPead2b5qb6d5SWQiX38KiJiEPW0j9grvVL9VH
b0OMx2OpptAUlUBUt3NXhukx+p91VmrrVBRfE00PrKwMxCfNSJcEPrvHmLiw
y6yq+I2Flrae/qyTymJVU1fycgEJoQdrEGgXNImfUfAEUA1oj1yYy8GX6Mfl
rjxfZFbalU6yGa0PYQS9s6wAlapg3ksRMEfJqbJZIhNTVKXJ5SpXBc2jqiGS
E4zPlqvc4RZIEf1tL9Va1lYTUQ5peJuzHBSbmZvSyllpltIU/BYeC4P/lJ79
yyxNoaLimOhJ64TJv7qT0ddr8Sj6Ex+xT9omFpnqlmydymlzpNHmBHGWN067
xAhsI3r1ND7Zf9Z09rSzGK8lsK2qcUaVESpN+ahKvTQX8TnTIth1mc3nupSY
sCEeDPjtt9/EV+Po7yvZ++s+FR/iZx8CHWdMB/0QP8XLjlr++49x7++r+Cm9
7CdzM/f+PjT88C9H5uyDPMLmz9yON0bTy3QqcisZvZc7q26QcdPLp473gZKb
Xv6cZLyNzviWl/9HyfgkQSLJu5rIO7NszqrmIPzRTke+uz7LzrUQz6HXXqnh
FARY1E72GeDgOCRVjWet+tObhamAj9ImZqUZiCoos+goM/Thlan4I2D6sSlo
NL5YwAHg6qKLBh1c0PI9oSMcECt3Xr45O98ZuX/lqxP+fPr0H2+OT58+oc9n
z49evGg+uDcEvpy8eeGf06d25OOTly+fvnriBr88+mHHgfLOyevz45NXRy92
aGO8HbhmtUPKUgcYIndoVWqCIWXBMJuU2RRfMObq6t9g6w8PDh5eX2PzTwjL
srBjIFtnwwBICZDh54woulxaj388248wVD/dvUPmajTAXYI3Z4NmJgc8k1nm
OSaCBOHCrlSC89/HKQcFcjZ4lkHpT/gXASeH3RVp3BtkRRSIxlwKvmBFh044
j/NdGvAgyVW2DMZOBVRk1IWRvlzAvlaKrGxl4BbAKMi6yAC2+VpmbvG1g2g/
Mtg6t5Kbndwkd2JTEkj8WDpeA9VVkuhVpabw2y5hqMhGh2kbhMZE4JkF8mOm
mPgO+6yjY1WaWYbZImbj5LYpzdWd1vveJr2PRN/eeDvaGP1g7GOPYJsvIZyb
oMiQm95IaQi+wZUOuTB4S/U+OGns32hbkdUTcMZWJqORLOA949cFB3Dh/OY3
JA6uZ5TbOSPDzG4GBMtm1p1OV2YbojblFpABOKtLJ+9P/YsktEUzzFl55o1K
Nzb1BVyeuizphySeDLvzNvYPzuo8BkwXm8xb5iTXojlr+t49QUzWM3y30th1
Udg725y0Y8ZunZKlZsuBBpcSCBBP6gWfpbLPMuJQMTAV4Ne5myT/iMzkm9MX
lpS9lVUyLss6rzKImnRBsB0JKO4FdN97fMN0LjCPNZh0qSluy+wSLyLOnS9i
Rx3eoojASUu1WuXYEoFMR/zZ3S7Wcg4VLAKLRlLvzneZ5xzr0jyexwlwi74q
xGySlCltDAKpga1BQUOZJXWC2luQwj61s6ysLn0vmaWXSepqyNUdx55r0XdD
6K89gFaKO8OxTKlh2qzTZ0LcjnHgkItIa5UXp7DSZZXpAe1Vdcr2BTTRq7Fp
AZDXaUYxm8N8Z0lby8erfq+nLmQDjN/97vvzL4HPPpT+0p16FuyZjQSg8Wud
U7Ihhg47QVkw97ukAaosYU/A7Tenx7YxKmxTSTKdffKw62SHJHeqResxDcu9
PIYFZXlMRwNBSzB1gGyEmcEWqguV5SyALsDqb+0iU06wOfCCEGFCeZcEUazq
aY6gkijP2EMzRQ6+yuDK8FGTjQsR8Ef5AJQ02btQea3lSmVlkMe1P9hWiMRK
lXiXtxYOgLIITbyNZwuTOn1AkF7DM+w9gxyK5mQbs8IL4mXyC3fCiHduxE4j
mtLRONWOehwmREvEohXyHBCm8JG4scyKd3Es9479PMzmAJK+UbjnMwJBLjAq
W9YQ36WpC2ZUlS01+8UabEm9k7GsAaUrZbEvCkyrSw38iFdrrDSLSwPdzXkD
2iEvtjNGNJadnZsZfy2qnB0s57+OtuAiiS7UfAUKHeeUuHf40NsynGeqWScG
BnoPvDda9kaLbGgTkG0KGvQvidap42BmA93JepdTi5giBo0ev7tWN/gSLoVh
g75VjsyFgk0k909suBwsJIRYUvYwS8LukN6l+DRhGY3SJ9htnrfGL3bCfKQE
AkbkoyJuYZJddkT6RxHgQhj7GkHUrBQZ4O1rE/9uWX+3P5L8chq7MHnK5suP
wwyXpsZvzKh2QEr4lmtPi/NOaQLM0yxNaSrv7TcLY3f+WKaQ/SUwecfzcof3
lmb2Fs5+xO5acuhtTNXfFWFOriInxVo2mFKKO3fuyMcLnbx32NAYQecIttax
EdiEXrZbBA/yHctd5HbDnWDP+9nT89aPMl1O9ZzPXXlSeOfeEQcJzdIwWgxr
sddBG5TwcH9fnvzd/wyXqoPjCE0J46+vRWzMge94jMNWFfRtWlda7rgtIia+
XBirgyI6XM1sBLJmJgZO38cNrbJl5EYUphg3OXJAgKK4IeYO87rP1C+sh4SJ
y6wRR/dgkfbc4z1/GsTtvYPdA/Hc2GoSy9WuX4kT9UdciWiy+99oxJWl1Ovv
9qeHVT7Njh8cL9/e++H7g8vpszfZ7B/mUZxUcWuB4iax4qaeOJnqZe5O3c4o
w/IJ3HAH5zcbduXPlYKhihLj5+sVFvU+Km1l72drin8HB1UJ3jx6c/7t+K/i
sQJHx49dUniCFce2gpkQr0s1Xyr+IaFX4LVBN8KhT1qdFddDu7erj9y+2wrt
n9TuFFFUT+s6nuuA8s111VW9rq9KGvhJqjccS/6Zitf41s0OOurT88UdtE5N
uv6dGsWRq+q7/KKzzLBe/TkK5QgZUiiSFjkY4PyrqRWiHNIpKo5N9vYuLy9j
/u2M6JXgBuC9K65zbTi3mKAui4kfOQkVskl4b0LTv1vhqHhGSa/nYVmqyYXi
Trz4nrOXOxhwzXT47xP5Y5hjYEn30qQCr94dtKvd8ubhR7/5NdHzE9Oz1SEH
iQ/2Rx8DWkHCBkDrJhFroessZFQQWPuPt4XWrfNAlTZfP+wkeWIkgQvFARyc
FnZ+IDjhsDjnZweSfiH3ikCrypI6V2WThgUQ7lBKuZjvYEqxw4kh/hbnXLsx
5Zn3q4hNeIiFckIcQu2jNIB2OzAguDh3eSwVz9pDm9FQ6EqBblvee31ydi56
SD2USRvFoBphY0uc2Ehub0bxLaVTTdTrlPGf9pAk2tpZnYsAF9tipx74w2FZ
rqp13wZ0sqf90CtZGOMqrBaONods2bygII6WbPJK5Mp6baGAKt4BJbZgTC4y
U1sa7eUsDSyMXeuQH1vL1LDTzMlkL0yOFbHzP5hwQFTlIkqItWeNqDYCygr6
vZUjkpNnBLClWZUZaYUuS/zIAePdM005+FCvf0zZ4lQ7lbSUl9cJfvuSc/M0
ytWgLNimcu3DUBYoYIIPQjmL6CwE+Y8fMGmq5Qf5hCs2K1b2D+KDr5911Jnq
dPdAPt72jA8iyjIH1SZtnVKMVFLCFLvovUe5PNLsy8xSOsB5FW7aAz+tiq2n
nKks9zPxaA5cILduzNcRKcNRtaJ9tullPqsBhHDT3YumC0/8PAAbMy+yX2/I
52/TDOocSBZBsit8c+IdqmksO76mzjrkmzhIUJiuw4c3bhOuk4+quTVh3ZY2
MtLh+UWGeLSXifnAtqBSU9L2sgx2oAMxLE+f6FI0gLWJgSJEqgB3r9IRj7uJ
LSjEyUoXx09I4gt6hRuNXFLUOywEkd478zZoQot+Ph/NuS5MCNtWP1ttdfm3
2H3pGlvQNOTLxZz+I96bsz0tTocz2OLVncFV0OV2tny0H9ff4YAv0d1iP/Bx
FjiyU+dNwaaVm6GKze3W04lGz3puKR19BgPqdvHHTSjO7J58ZaT3xGMb+v9Y
fwvWe0n614L7e58f7h1fIsTvq8XvB/0hWO/VK+CcL0yh3xX1ckqhwM1o7s/w
cwN6TBLh+lcElg/k/fv35f7B4dc9OHdEDUfnHU7+OaAeA8RnAfew38FYsbfh
FuI7JfWrO3G8OhwoIlSEJ82lO1IPX6FpaiBNkbGTvZam2Ojy4Iw8UIkrCOD4
KKTAAClpNpsREFS+Yt1XLm42okoGWEDvuu7ZpjClf6FAkCRZLxRCDG7gGCKL
cIwaw9LanaTAg6jAEeoR/XYYiozb/gJFsWynFub6z3thyWBxdeSgMJinMtog
01EuXWdSm2cjqYxITEyJQRSA1TjTriRirlXVKTFxaUWo5H1hLgHgc26E4URk
t7WCKVS5baiw3agqQlHhGnWLdFyZMf5pq0IglNrysbcRAC/JawZDtoLcjddh
GTfyFkm5Xvn2gK29FoSqWwiuuI5CODri/RI0AzIQLwZbwWfWNxVNjOg8ns2Z
GRcGFmSA4NsEqky5SNxUcVsUaQoTAw0GXiTXKy1cRclvGT9w5Tez1MzOWSdq
j59wadr2Mk9jGj+BIOhJzNIdX47UUaMA1UTNSoELvgLS9KAMMqQtkGm/Xy6h
cd+wTn3nm0NJx9a2CJPF41ZqnRtFBcI3K9PNVm9yddBrdH2R7MCEgjw3S7Or
QpE41ZZd8x1H+q0nccN0GxrmeEKQw5k5vcObsw2ecG07Lh8176VGOxGDnUgW
I0E5BM4NtMkDellXT1SldqLuQJdzAOvuWq3pMgUz4nD3HhWnrq5Cgf/6mhIH
2Bj7ER54B3oxSEF8mZK8M1vbFatLEGSPvayzBH6s1y1oAEZYhNbUkk+Y5U6x
BQzulBNcoUzeM3J0H92oWOdOcrYd/K4LLG6BVWKabZq0tkcc4oZ8XT/iGOwr
GwXnnoofYrOzhAZGrSIeZod6IkbsQBdrF2eITW9hFOlK9TGZuo4zEUUbb4c6
Mnx5vANKN3U99UHDdxdNM5AGWPfl1Bua1rh5QcOzhhRBSipDqDHgIRebHGMe
fGEbxOibXswU99s1ehjCB3caznzCMFIdfViKiKOYTA0eWKvnmwMJ8agDTrVm
JOorcOlKXfQJYpb4MAwoQPata6s9Srgw2gnpTcLZAI5oM/ThQIZ2CxCLfZFY
40fUX7VuQXC4CbGTYG2E1fi+hxQgYsj+sl/o2jL98c5qMva728Aqbsjwk1Jr
GOVZ7bpIFqUpTG2pV5IIds0THj19nxi9e/biiGF7YOuxvyfINbCb/lzTFOSu
ewXYGwQfyL7osLKlElw0LNaE0VEsa8qUlTl3MYQ/V18VFpC4Orqa8H8zZ/A5
I2k2aFEg3VWoP5Q7DXeoujDi3LqNcNlb1s8XJX9aIbhtm9AUTL99tlgl62/o
f4tp9k2un31bJc9+yY+fv9r/4T9P8e9/LabP3+Yv5uZRL9J2GxuKtL3F72LY
/5J4O+x6IN7esu026j7y9yU+au8cnw1gEXtBMK4DKsONzyCNImjvmKgppQC6
7GIJ+LnK6PwPDr++d/+Bq+hDM+Pq+xauuXd9g8BQhd5Ppiqe/97Dr/96/8H+
/v7O1mr9p8c4MvQc/G5RdoV97iD4aTQk19Q/3D/gzsEiFuFS+3DpT1750t/2
2zbN7abXpZmSfdlIuFScqyQ4NgBNcu47eZHOzQYjc63e8715liQKrrngHtJ1
ItwggFhkbYRiexc7oo7eI07BNjpItMQXiwcEsHFGwmRNgKR/ycjhdR3obiaV
Ygii6Cpfw5m9oBvRm9THk3GfeAgRIkNLRCGc5Y5srEdxSrNucBk3OEZ9f4CH
LNHtvamh/vYEAOxCJE1up3O5uFUq9Tfk6iLlmDncyxDsG/mqcjccvIHZw46S
CMVphrbmKEKWo3JXsX0LqutKB6UuV9L2ljqPOA2H5hd3XtVWp0hZWy91YHdn
eW7bF2193m+40+3h15TdNTmabc/4uQJA22pA+IMO8IU4zti7EEwifrF0LbO9
mJdx2BuLzt3Xx8dfksvhbhkQvrLXmIhhAdsIwUZduYu7Zr1/y5cbhb8n4Hw8
sGaRrZpsJLczXBru63YXzgxLO+vwwGkD0lmSOLEEcaJrIhG1zGjyDZ2q+C7t
/ulR5qb1U/mWWtMvgRkQKefhdlS3CZg7n9ngJDCBTCPICa4c5XjY9tI8qzK7
4NxLS92NGtRcPB2UfDJaDOFLptPMBL/PvmYRVRpd0bm7XyfBR6dPWWANTnje
yJwnRGyKo+Y0ZZh3M8sMKpu8ZycVLDbCmLYhpgloKBTi9O7INUcN6AM0U7ir
WC0RTXjTpLZa9aJTh9i3fS52oVwlpyPPXkN81JAVrcw26cneTqd6Ru5OR166
SeP4mhdOwIEc3//ydPrrVyCPCAHGEGXRbTB5822wl5gloWagqEqxNHR7ZRgP
uGUNeBBGkRVYMz7MYAUoxIBVgZKpuabHVVSyHqgyurtvTYc+3TnimI2HpXWi
B5j2BTWyZTlZfLyWIsxPKtESpKgTjR4O4x+nxPk+ubtE1nnk9M79f1JQFyxw
DoaB/IrmhkzWuAShFO4UxWlMk45qNmjKLcG9qzTgxF0JhC3GjcjNc3Gcz2GW
mlXhfkPU2jXVfL+Qy+shqWHD/bUtqYCGjBDtDShMTARrmOhFfYGcqFlwmJ5N
pe6Zvsrk5MOFokxEEK/d3H6lpTjDFq8hems4gIouH5ENoOe27Yq0zkfollpi
qPH/9ySUVBPivwFm5bkzyEkAAA==

-->

</rfc>

