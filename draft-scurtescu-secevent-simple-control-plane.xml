<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-management-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
j9AttcRQ4///FpRUE+JfmuvibglIAAA=

-->

</rfc>

