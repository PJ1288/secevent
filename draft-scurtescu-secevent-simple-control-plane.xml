<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-simple-control-plane-00" category="info">

  <front>
    <title abbrev="set-control-plane">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="June" day="29"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Status  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Add Subject    |            |
| API        <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s status endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the configuration endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the add subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MUST return an empty 200 OK response, and MUST NOT indicate to
the receiver that the request was ignored.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and responde with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 1234"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verify" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request.</t>
</list></t>

<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the verification endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>A successful response from a POST to the verification endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously with their request.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verify" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicous-subject-removal" title="Malicous Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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

-->

</rfc>

