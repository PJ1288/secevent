<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-scurtescu-secevent-event-stream-mgmt-api-00" category="info">

  <front>
    <title abbrev="event-stream-management-api">Management API for SET Event Streams</title>

    <author initials="M." surname="Scurtescu" fullname="Marius Scurtescu">
      <organization>Google</organization>
      <address>
        <email>mscurtescu@google.com</email>
      </address>
    </author>
    <author initials="A." surname="Backman" fullname="Annabelle Backman">
      <organization>Amazon</organization>
      <address>
        <email>richanna@amazon.com</email>
      </address>
    </author>

    <date year="2017" month="August" day="10"/>

    <area>Security</area>
    <workgroup>secevent</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Security Event Token (SET) delivery requires event receivers to indicate
to event transmitters the subjects about which they wish to receive
events, and how they wish to receive them. This specification defines an HTTP 
API for a basic control plane that event transmitters can implement and
event receivers may use to manage the flow of events from one to the
other.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">
<t>This specification defines an HTTP API to be implemented by Event Transmitters
and that can be used by Event Receivers to query the Event Stream status, to
add and remove subjects and to trigger verification.</t>

<figure title="Event Stream Management API" anchor="figintro"><artwork><![CDATA[
+------------+                +------------+
|            | Stream Config  |            |
| Event      <----------------+ Event      |
| Stream     |                | Receiver   |
| Management | Stream Status  |            |
| API        <----------------+            |
|            |                |            |
|            | Add Subject    |            |
|            <----------------+            |
|            |                |            |
|            | Remove Subject |            |
|            <----------------+            |
|            |                |            |
|            | Verification   |            |
|            <----------------+            |
|            |                |            |
+------------+                +------------+
]]></artwork></figure>

<t>How events are delivered and the structure of events are not in scope for this
specification.</t>

</section>
<section anchor="conv" title="Notational Conventions">
<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="def" title="Definitions">
<t>In addition to terms defined in <xref target="SET"></xref>, this
specification uses the following terms:</t>

<t><list style="hanging">
  <t hangText='Subject Identifier Object'><vspace blankLines='0'/>
  A JSON object containing a set of one or more claims about a subject that
when taken together uniquely identify that subject. This set of claims
SHOULD be declared as an acceptable way to identify subjects of SETs by
one or more specifications that profile <xref target="SET"></xref>.</t>
</list></t>

</section>
<section anchor="management" title="Event Stream Management">
<t>Event Receivers manage how they receive events, and the subjects about which
they want to receive events over an Event Stream by making HTTP requests to
endpoints in the Event Stream Management API.</t>

<t>The Event Stream Management API is implemented by the Event Transmitter and
consists of the following endpoints:</t>

<t><list style="hanging">
  <t hangText='Configuration Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current configuration.</t>
  <t hangText='Status Endpoint'><vspace blankLines='0'/>
  An endpoint used to read the Event Stream’s current status.</t>
  <t hangText='Add Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to add subjects to an Event Stream.</t>
  <t hangText='Remove Subject Endpoint'><vspace blankLines='0'/>
  An endpoint used to remove subjects from an Event Stream.</t>
  <t hangText='Verification Endpoint'><vspace blankLines='0'/>
  An endpoint used to request the Event Transmitter transmit a Verification
Event over the Event Stream.</t>
</list></t>

<t>An Event Transmitter MAY use the same URLs as endpoints for multiple streams,
provided that the Event Transmitter has some mechanism through which they can
identify the applicable Event Stream for any given request, e.g. from
authentication credentials. The definition of such mechanisms is outside the
scope of this specification.</t>

<section anchor="stream" title="Stream Configuration">
<t>An Event Stream’s configuration is represented as a JSON object with the
following properties:</t>

<t><list style="hanging">
  <t hangText='aud'><vspace blankLines='0'/>
  A string containing an audience claim as defined in <xref target="RFC7519">JSON Web Token
(JWT)</xref> that identifies the Event Receiver for the Event Stream.
This property cannot be updated.</t>
  <t hangText='events'><vspace blankLines='0'/>
  OPTIONAL. An array of URIs identifying the set of events which MAY be
delivered over the Event Stream. If omitted, Event Transmitters SHOULD make
this set available to the Event Receiver via some other means (e.g.
publishing it in online documentation).</t>
  <t hangText='delivery'><vspace blankLines='0'/>
  A JSON object containing a set of name/value pairs specifying configuration
parameters for the SET delivery method. The actual delivery method is
identified by the special key “delivery_method” with the value being a URI as
defined in <xref target="DELIVERY"></xref>.</t>
  <t hangText='min_verification_interval'><vspace blankLines='0'/>
  An integer indicating the minimum amount of time in seconds that must pass
in between verification requests. If an Event Receiver submits verification
requests more frequently than this, the Event Transmitter MAY respond with a
429 status code. An Event Transmitter SHOULD NOT respond with a 429 status
code if an Event Receiver is not exceeding this frequency.</t>
  <t hangText='status'><vspace blankLines='0'/>
  A string indicating the current status of the event stream. It MUST have one 
of the following values:

      <list style="hanging">
        <t hangText='enabled'><vspace blankLines='0'/>
        The transmitter will transmit events over the stream, according to the
stream’s configured delivery method.</t>
        <t hangText='paused'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream. The transmitter
will hold any events it would have transmitted while paused, and will
transmit them when the stream’s status becomes “enabled”.</t>
        <t hangText='disabled'><vspace blankLines='0'/>
        The transmitter will not transmit events over the stream, and will not
hold any events for later transmission.</t>
      </list>
  </t>
</list></t>

<section anchor="checking-a-streams-status" title="Checking a Stream’s Status">
<t>An Event Receiver checks the current status of an event stream by making an
HTTP GET request to the stream’s Status Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
object with a single attribute “status”, whose string value is the value of
the stream’s status.</t>

<t>The following is a non-normative example request to check an event stream’s
status:</t>

<figure title="Example: Check Stream Status Request" anchor="figstatusreq"><artwork><![CDATA[
GET /set/stream/status HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Check Stream Status Response" anchor="figstatusresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "status": "enabled"
}
]]></artwork></figure>

</section>
<section anchor="reading-a-streams-configuration" title="Reading a Stream’s Configuration">
<t>An Event Receiver gets the current configuration of a stream by making an
HTTP GET request to the Configuration Endpoint. On receiving a valid request
the Event Transmitter responds with a 200 OK response containing a <xref target="JSON"/>
representation of the stream’s configuration in the body.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Read Stream Configuration Request" anchor="figreadconfigreq"><artwork><![CDATA[
GET /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Read Stream Configuration Response" anchor="figreadconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "enabled",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ],
  "min_verification_interval": 60,
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Read Stream Configuration Errors" anchor="tabreadconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to read the stream configuration</c>
      <c>404</c>
      <c>if there is no Event Stream configured for this Event Receiver</c>
</texttable>

</section>
<section anchor="updating-a-streams-configuration" title="Updating a Stream’s Configuration">
<t>An Event Receiver updates the current configuration of a stream by making an
HTTP POST request to the Configuration Endpoint. The POST body contains a
{{!JSON} representation of the updated configuration. On receiving a valid
request the Event Transmitter responds with a 200 OK response containing a
<xref target="JSON"/> representation of the updated stream configuration in the body.</t>

<t>The full set of editable properties must be present in the POST body, not only
the ones that are specifically intended to be changed. Missing properties
SHOULD be interpreted as requested to be deleted. Event Receivers should read
the configuration first, modify the <xref target="JSON"/> representation, then make an
update request.</t>

<t>Properties that cannot be updated MAY be present, but they MUST match the
expected value.</t>

<t>The following is a non-normative example request to read an Event Stream’s
configuration:</t>

<figure title="Example: Update Stream Configuration Request" anchor="figupdateconfigreq"><artwork><![CDATA[
POST /set/stream HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>The following is a non-normative example response:</t>

<figure title="Example: Update Stream Configuration Response" anchor="figupdateconfigresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "aud": "http://www.example.com",
  "delivery": {
    "delivery_method": "urn:example:secevent:delivery:http_post",
    "url": "https://receiver.example.com/events"
  },
  "status": "paused",
  "events": [
    "urn:example:secevent:events:type_1",
    "urn:example:secevent:events:type_2",
    "urn:example:secevent:events:type_3"
  ]
}
]]></artwork></figure>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Update Stream Configuration Errors" anchor="tabupdateconfig">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to update the stream configuration</c>
</texttable>

</section>
</section>
<section anchor="subjects" title="Subjects">
<t>An Event Receiver can indicate to an Event Transmitter whether or not the
receiver wants to receive events about a particular subject by “adding” or
“removing” that subject to the Event Stream, respectively.</t>

<section anchor="adding-a-subject-to-a-stream" title="Adding a Subject to a Stream">
<t>To add a subject to an Event Stream, the Event Receiver makes an HTTP POST
request to the Add Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be added. On a successful
response, the Event Transmitter responds with an empty 200 OK response.</t>

<t>The Event Transmitter MAY choose to silently ignore the request, for example
if the subject has previously indicated to the transmitter that they do not
want events to be transmitted to the Event Receiver. In this case, the
transmitter MAY return an empty 200 OK response or an appropriate error code
(See <xref target="SecCon">Security Considerations</xref>).</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Add Subject Errors" anchor="tabadderr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to add this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 200</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to add a subject to a
stream, where the subject is identified by an OpenID Connect email claim:</t>

<figure title="Example: Add Subject Request" anchor="figaddreq"><artwork><![CDATA[
POST /set/subjects:add HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "email": "example.user@example.com"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Add Subject Response" anchor="figaddresp"><artwork><![CDATA[
HTTP/1.1 200 OK
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
<section anchor="removing-a-subject" title="Removing a Subject">
<t>To remove a subject from an Event Stream, the Event Receiver makes an HTTP
POST request to the Remove Subject Endpoint, containing in the body a Subject
Identifier Object identifying the subject to be removed. On a successful
response, the Event Transmitter responds with a 204 No Content response.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Remove Subject Errors" anchor="tabremoveerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>403</c>
      <c>if the Event Receiver is not allowed to remove this particular subject</c>
      <c>404</c>
      <c>if the subject is not recognized by the Event Transmitter, the Event Transmitter may chose to stay silent in this case and respond with 204</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request where the subject is
identified by a phone_number claim:</t>

<figure title="Example: Remove Subject Request" anchor="figremovereq"><artwork><![CDATA[
POST /set/subjects:remove HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=

{
  "phone_number": "+1 206 555 0123"
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Remove Subject Response" anchor="figremoveresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

</section>
</section>
<section anchor="verification" title="Verification">
<t>In some cases, the frequency of event transmission on an Event Stream will
be very low, making it difficult for an Event Receiver to tell the
difference between expected behavior and event transmission failure due to a
misconfigured stream. Event Receivers can request that a verification event
be transmitted over the Event Stream, allowing the receiver to confirm that
the stream is configured correctly upon successful receipt of the event. The
acknowledgment of a Verification Event also confirms to the Event Transmitter
that end-to-end delivery is working, including signature verification and
encryption.</t>

<t>An Event Transmitter MAY send a Verification Event at any time, even if one
was not requested by the Event Receiver.</t>

<section anchor="verification-event" title="Verification Event">
<t>The Verification Event is a standard SET with the following attributes:</t>

<t><list style="hanging">
  <t hangText='event type'><vspace blankLines='0'/>
  The Event Type URI is:
“urn:ietf:params:secevent:event-type:core:verification”.</t>
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL An opaque value provided by the Event Receiver when the event is
triggered. This is a nested attribute in the event payload.</t>
</list></t>

<t>Upon receiving a Verification Event, the Event Receiver SHALL parse the SET
and validate its claims. In particular, the Event Receiver SHALL confirm that
the value for “state” is as expected. If the value of “state” does not match,
an error response of “setData” SHOULD be returned (see Section 2.4 of
<xref target="DELIVERY"/>).</t>

<t>In many cases, Event Transmitters MAY disable or suspend an Event
Stream that fails to successfully verify based on the acknowledgement
or lack of acknowledgement by the Event Receiver.</t>

</section>
<section anchor="triggering-a-verification-event" title="Triggering a Verification Event.">
<t>To request that a verification event be sent over an Event Stream, the Event
Receiver makes an HTTP POST request to the Verification Endpoint, with a JSON
object containing the parameters of the verification request, if any. On a
successful request, the event transmitter responds with an empty 204 No Content
response.</t>

<t>Verification requests have the following properties:</t>

<t><list style="hanging">
  <t hangText='state'><vspace blankLines='0'/>
  OPTIONAL. An arbitrary string that the Event Transmitter MUST echo back to
the Event Receiver in the verification event’s payload. Event Receivers
MAY use the value of this parameter to correlate a verification event with
a verification request. If the verification event is initiated by the
transmitter then this parameter MUST not be set.</t>
</list></t>

<t>A successful response from a POST to the Verification Endpoint does not
indicate that the verification event was transmitted successfully, only that
the Event Transmitter has transmitted the event or will do so at some point
in the future. Event Transmitters MAY transmit the event via an asynchronous
process, and SHOULD publish an SLA for verification event transmission
times. Event Receivers MUST NOT depend on the verification event being
transmitted synchronously or in any particular order relative to the current
queue of events.</t>

<t>Errors are signaled with HTTP staus codes as follows:</t>

<texttable title="Verification Errors" anchor="taberifyerr">
      <ttcol align='left'>Code</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>400</c>
      <c>if the request body cannot be parsed or if the request is otherwise invalid</c>
      <c>401</c>
      <c>if authorization failed or it is missing</c>
      <c>429</c>
      <c>if the Event Receiver is sending too many requests in a gvien amount of time</c>
</texttable>

<t>The following is a non-normative example request to trigger a verification
event:</t>

<figure title="Example: Trigger Verification Request" anchor="figverifyreq"><artwork><![CDATA[
POST /set/verify HTTP/1.1
Host: transmitter.example.com
Authorization: Bearer eyJ0b2tlbiI6ImV4YW1wbGUifQo=
Content-Type: application/json; charset=UTF-8

{
  "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo="
}
]]></artwork></figure>

<t>The following is a non-normative example response to a successful request:</t>

<figure title="Example: Trigger Verification Response" anchor="figverifyresp"><artwork><![CDATA[
HTTP/1.1 204 No Content
Server: transmitter.example.com
Cache-Control: no-store
Pragma: no-cache
]]></artwork></figure>

<t>And the following is a non-normative example of a verification event sent to
the Event Receiver as a result of the above request:</t>

<figure title="Example: Verification SET" anchor="figverifyset"><artwork><![CDATA[
{
  "jti": "123456",
  "iss": "https://transmitter.example.com",
  "aud": "receiver.example.com",
  "iat": "1493856000",
  "events": [
    "urn:ietf:params:secevent:event-type:core:verification" : {
      "state": "VGhpcyBpcyBhbiBleGFtcGxlIHN0YXRlIHZhbHVlLgo=",
    },
  ],
}
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="SecCon" title="Security Considerations">

<section anchor="subject-probing" title="Subject Probing">
<t>It may be possible for an Event Transmitter to leak information about subjects
through their responses to add subject requests. A 404 response may indicate
to the Event Receiver that the subject does not exist, which may inadvertantly
reveal information about the subject (e.g. that a particular individual does
or does not use the Event Transmitter’s service).</t>

<t>Event Transmitters SHOULD carefully evaluate the conditions under which they
will return error responses to add subject requests. Event Transmitters MAY
return a 204 response even if they will not actually send any events related
to the subject, and Event Receivers MUST NOT assume that a 204 response means
that they will receive events related to the subject.</t>

</section>
<section anchor="information-harvesting" title="Information Harvesting">
<t>SETs may contain personally identifiable information (PII) or other non-public
information about the event transmitter, the subject (of an event in the SET),
or the relationship between the two. It is important for Event Transmitters to
understand what information they are revealing to Event Receivers when
transmitting events to them, lest the event stream become a vector for 
unauthorized access to private information.</t>

<t>Event Transmitters SHOULD interpret add subject requests as statements of
interest in a subject by an Event Receiver, and ARE NOT obligated to transmit
events related to every subject an Event Receiver adds to the stream. Event
Transmitters MAY choose to transmit some, all, or no events related to any
given subject and SHOULD validate that they are permitted to share the
information contained within an event with the Event Receiver before
transmitting the event. The mechanisms by which such validation is performed
are outside the scope of this specification.</t>

</section>
<section anchor="malicious-subject-removal" title="Malicious Subject Removal">
<t>A malicious party may find it advantageous to remove a particular subject from
a stream, in order to reduce the Event Receiver’s ability to detect
malicious activity related to the subject, inconvenience the subject, or for
other reasons. Consequently it may be in the best interests of the subject for
the Event Transmitter to continue to send events related to the subject for
some time after the subject has been removed from a stream.</t>

<t>Event Transmitters MAY continue sending events related to a subject for some
amount of time after that subject has been removed from the stream. Event
Receivers MUST tolerate receiving events for subjects that have been removed
from the stream, and MUST NOT report these events as errors to the Event
Transmitter.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="JSON" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC7519" target='http://www.rfc-editor.org/info/rfc7519'>
<front>
<title>JSON Web Token (JWT)</title>
<author initials='M.' surname='Jones' fullname='M. Jones'><organization /></author>
<author initials='J.' surname='Bradley' fullname='J. Bradley'><organization /></author>
<author initials='N.' surname='Sakimura' fullname='N. Sakimura'><organization /></author>
<date year='2015' month='May' />
<abstract><t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t></abstract>
</front>
<seriesInfo name='RFC' value='7519'/>
<seriesInfo name='DOI' value='10.17487/RFC7519'/>
</reference>


<reference anchor="SET" target="https://tools.ietf.org/html/draft-ietf-secevent-token-01">
  <front>
    <title>Security Event Token (SET)</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DELIVERY" target="https://github.com/independentid/Identity-Events/blob/master/draft-hunt-secevent-delivery.txt">
  <front>
    <title>SET Token Delivery Using HTTP</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>





  </back>

<!-- ##markdown-source:
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
tI9aQlPj3h2ISTUh/huOGHE6X1UAAA==

-->

</rfc>

